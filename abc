[]
[1 2 3 4 5 6 7 8 9 10]
['() '() '()]
[[] [] []]
["a" "b" "c"]
[1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1]
[+ - * / % id]
['x 'y 'z 'abc 'def]
[#\x #\y #\z #\space #\newline]
['(1 2 3) '(2 3 4) '(3 4 5)]
[[1 2 3] [2 3 4] [3 4 5]]

'()
(list 1 2 3 4 5 6 7 8 9 10)
(list '() '() '())
(list [] [] [])
(list "a" "b" "c")
(list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
(list + - * / % id)
(list 'x 'y 'z 'abc 'def)
(list #\x #\y #\z #\space #\newline)
(list '(1 2 3) '(2 3 4) '(3 4 5))
(list [1 2 3] [2 3 4] [3 4 5])

(list 1 2 3 4 5 6 7 8 9 10 '() '() '() [] [] [] "a" "b" "c" 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1 + - * / % id 'x 'y 'z 'abc 'def #\x #\y #\z #\space #\newline '(1 2 3) '(2 3 4) '(3 4 5) [1 2 3] [2 3 4] [3 4 5])

(eq? (list 'x 'y 'z 'abc 'def) (filter symbol? v))
(eq? (list [] [] [] [1 2 3] [2 3 4] [3 4 5]) (filter vector? v))
(eq? (list '(1 2 3) '(2 3 4) '(3 4 5)) (filter list? v))
(eq? (list 1 2 3 4 5 6 7 8 9 10) (filter integer? v))
(eq? (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) (filter real? v))
(eq? (list + - * / % id) (filter func? v))
(eq? (list 1 2 3 4 5 6 7 8 9 10 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
     (filter number? v))
(eq? (list #\x #\y #\z #\space #\newline) (filter char? v))
(eq? (list "a" "b" "c") (filter string? v))

(define (filter-list-test)
  (let* (v (list 1 2 3 4 5 6 7 8 9 10 '() '() '() [] [] [] "a" "b" "c" 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1 + - * / % id 'x 'y 'z 'abc 'def #\x #\y #\z #\space #\newline '(1 2 3) '(2 3 4) '(3 4 5) [1 2 3] [2 3 4] [3 4 5]))
    (&&
      (eq? (list 'x 'y 'z 'abc 'def) (filter symbol? v))
      (eq? (list [] [] [] [1 2 3] [2 3 4] [3 4 5]) (filter vector? v))
      (eq? (list '(1 2 3) '(2 3 4) '(3 4 5)) (filter list? v))
      (eq? (list 1 2 3 4 5 6 7 8 9 10) (filter integer? v))
      (eq? (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) (filter real? v))
      (eq? (list + - * / % id) (filter func? v))
      (eq? (list 1 2 3 4 5 6 7 8 9 10 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
           (filter number? v))
      (eq? (list #\x #\y #\z #\space #\newline) (filter char? v))
      (eq? (list "a" "b" "c") (filter string? v))
      #t #t
    )))

(define (filter-vector-test)
  (let* (v [1 2 3 4 5 6 7 8 9 10 '() '() '() [] [] [] "a" "b" "c" 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1 + - * / % id 'x 'y 'z 'abc 'def #\x #\y #\z #\space #\newline '(1 2 3) '(2 3 4) '(3 4 5) [1 2 3] [2 3 4] [3 4 5]])
    (&&
      (eq? (vector 'x 'y 'z 'abc 'def) (filter symbol? v))
      (eq? (vector [] [] [] [1 2 3] [2 3 4] [3 4 5]) (filter vector? v))
      (eq? (vector '(1 2 3) '(2 3 4) '(3 4 5)) (filter list? v))
      (eq? (vector 1 2 3 4 5 6 7 8 9 10) (filter integer? v))
      (eq? (vector 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) (filter real? v))
      (eq? (vector + - * / % id) (filter func? v))
      (eq? (vector 1 2 3 4 5 6 7 8 9 10 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
           (filter number? v))
      (eq? (vector #\x #\y #\z #\space #\newline) (filter char? v))
      (eq? (vector "a" "b" "c") (filter string? v))
      #t #t
  )))

(define (append-list-test)
  (&&
    TODO
    #t #t
  ))

(define (append-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (find-first-list-test)
  (&&
    TODO
    #t #t
  ))

(define (find-first-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (->vector-list-test)
  (&&
    TODO
    #t #t
  ))

(define (->vector-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (->list-list-test)
  (&&
    TODO
    #t #t
  ))

(define (->list-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (copy-list-test)
  (&&
    TODO
    #t #t
  ))

(define (copy-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (but-last-list-test)
  (&&
    TODO
    #t #t
  ))

(define (but-last-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (reverse-list-test)
  (&&
    TODO
    #t #t
  ))

(define (reverse-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (map-while-list-test)
  (&&
    TODO
    #t #t
  ))

(define (map-while-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (map-until-list-test)
  (&&
    TODO
    #t #t
  ))

(define (map-until-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (take-while-list-test)
  (&&
    TODO
    #t #t
  ))

(define (take-while-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (take-until-list-test)
  (&&
    TODO
    #t #t
  ))

(define (take-until-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (drop-while-list-test)
  (&&
    TODO
    #t #t
  ))

(define (drop-while-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (drop-until-list-test)
  (&&
    TODO
    #t #t
  ))

(define (drop-until-vector-test)
  (&&
    TODO
    #t #t
  ))

(define (zip-list-test)
  (&&
    TODO
    #t #t
  ))

(define (zip-vector-test)
  (&&
    TODO
    #t #t
  ))
