(module core-collections
 [[set-at set-at]
  [first first]
  [second second]
  [third third]
  [rest rest]
  [size size]
  [empty? empty?]
  [nth nth]
  [foldl foldl]
  [foldl1 foldl1]
  [map map]
  [filter filter]
  [remove remove]
  [append append]
  [find-first find-first]
  [->vector ->vector]
  [->list ->list]
  [but-last but-last]
  [reverse reverse]
  [map-while map-while]
  [map-until map-until]
  [take take]
  [drop drop]
  [take-while take-while]
  [take-until take-until]
  [drop-while drop-while]
  [drop-until drop-until]
  [zip zip]
  [get get]
  [any? any?]
  [all? all?]
  [none? none?]
  [sort sort]
  [sort-by sort-by]
  [foldr foldr]]

(def-generic x (set-at x i e) (lambda (x i e) x))

(def-generic x (first x) nothing)
(def-generic x (rest x) nothing)

(def-generic x (nth x i) nothing)
(def-generic x (map f x) nothing)
(def-generic x (filter p x) nothing)
(def-generic x (append x y) nothing)
(def-generic x (find-first p x) nothing)
(def-generic x (->vector x) nothing)
(def-generic x (->list x) nothing)
(def-generic x (but-last x) nothing)
(def-generic x (reverse x) nothing)

(def-generic x (take n x) nothing)
(def-generic x (drop n x) nothing)
(def-generic x (take-while p x) nothing)
(def-generic x (drop-while p x) nothing)

(def-generic x (sort x) nothing)
(def-generic x (sort-by comp x) nothing)
      
      

(define (default-size xs)
  (if (nothing? (rest xs))
    0
    (inc (default-size (rest xs)))))
(def-generic x (size x) default-size)

(def-generic x (second x) (lambda (x) (first (rest x))))
(def-generic x (third x) (lambda (x) (first (rest (rest x)))))

(def-generic x (empty? x)
  (lambda (x) (nothing? (first x))))

(def-generic x (get x i) nth)
(def-generic x (remove p x) (lambda (p x) (filter (negate p) x)))
(def-generic x (map-while f p x) (lambda (f p x) (map f (take-while p x))))
(def-generic x (map-until f p x) (lambda (f p x) (map f (drop-while p x))))
(def-generic x (drop-until p x) (lambda (p x) (drop-while (negate p) x)))
(def-generic x (take-until p x) (lambda (p x) (take-while (negate p) x)))

(define (default-foldl f s xs)
  (if (empty? xs) s
    (default-foldl f (f s (first xs)) (rest xs))))
(def-generic x (foldl f s x) nothing)

(define (default-zip c0 c1)
  (cond ((empty? c0) '())
        ((or (empty? c1) (nothing? c1)) '())
        (#t (cons (list (first c0).? (first c1).?)
                  (default-zip (second c0).? (rest c1).?)))))
(def-generic x (zip x y) default-zip)

(define (default-foldl1 f xs)
  (cond ((empty? xs) (nothing))
        ((empty? (rest xs)) (first xs))
        (#t (foldl f (first xs) (rest xs)))))
(def-generic x (foldl1 f xs) default-foldl1)

(def-generic x (any? p x) (lambda (p x) (not (nothing? (find-first p x)))))
(def-generic x (all? p x) (lambda (p x) (empty? (drop-while p x))))
(def-generic x (none? p x) (lambda (p x) (nothing? (find-first p x))))

(def-generic x (foldr f s x)
  (lambda (f s x)
    (if (empty? x)
      s
      (f (first x).? (foldr f s (rest x).?)))))
)
