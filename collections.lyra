(module core-collections
 [[set-at set-at]
  [first first]
  [second second]
  [third third]
  [rest rest]
  [size size]
  [empty? empty?]
  [nth nth]
  [foldl foldl]
  [map map]
  [filter filter]
  [remove remove]
  [append append]
  [find-first find-first]
  [->vector ->vector]
  [->list ->list]
  [but-last but-last]
  [reverse reverse]
  [map-while map-while]
  [map-until map-until]
  [take take]
  [drop drop]
  [take-while take-while]
  [take-until take-until]
  [drop-while drop-while]
  [drop-until drop-until]
  [zip zip]]

(define (set-at x i e) ((find-type-fn x 'set-at) x i e))

(def-generic x (first x) nothing)
(def-generic x (second x) nothing)
(def-generic x (third x) nothing)
(def-generic x (rest x) nothing)

(def-generic x (size x) always-null)
(def-generic x (empty? x) always-false)

(def-generic x (nth x i) nothing)
(def-generic x (foldl f s x) nothing)
(def-generic x (map f x) nothing)
(def-generic x (filter p x) nothing)
(def-generic x (remove p x) (lambda (p x) (filter (negate p) x)))
(def-generic x (append x y) nothing)
(def-generic x (find-first p x) nothing)
(def-generic x (->vector x) nothing)
(def-generic x (->list x) nothing)
(def-generic x (but-last x) nothing)
(def-generic x (reverse x) nothing)

(def-generic x (map-while f p x) (lambda (f p x) (map f (take-while p x))))
(def-generic x (map-until f p x) (lambda (f p x) (map f (drop-while p x))))

(def-generic x (take n x) nothing)
(def-generic x (drop n x) nothing)
(def-generic x (take-while p x) nothing)
(def-generic x (take-until p x) nothing)
(def-generic x (drop-while p x) nothing)
(def-generic x (drop-until p x) nothing)

(def-generic x (zip x y) nothing)
)
