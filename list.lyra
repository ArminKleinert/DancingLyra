(module core-list
 [[cadr cadr]
  [cdar cdar]
  [cddr cddr]
  [caaar caaar]
  [caadr caadr]
  [cadar cadar]
  [caddr caddr]
  [cdaar cdaar]
  [cdadr cdadr]
  [cddar cddar]
  [cdddr cdddr]
  [caaaar caaaar]
  [caaadr caaadr]
  [caadar caadar]
  [caaddr caaddr]
  [cadaar cadaar]
  [cadadr cadadr]
  [caddar caddar]
  [cadddr cadddr]
  [cdaaar cdaaar]
  [cdaadr cdaadr]
  [cdadar cdadar]
  [cdaddr cdaddr]
  [cddaar cddaar]
  [cddadr cddadr]
  [cdddar cdddar]
  [cddddr cddddr]]

(define (caar x)    (car (car x)))
(define (cadr x)    (car (cdr x)))
(define (cdar x)    (cdr (car x)))
(define (cddr x)    (cdr (cdr x)))
(define (caaar x)   (car (car (car x))))
(define (caadr x)   (car (car (cdr x))))
(define (cadar x)   (car (cdr (car x))))
(define (caddr x)   (car (cdr (cdr x))))
(define (cdaar x)   (cdr (car (car x))))
(define (cdadr x)   (cdr (car (cdr x))))
(define (cddar x)   (cdr (cdr (car x))))
(define (cdddr x)   (cdr (cdr (cdr x))))
(define (caaaar x)  (car (car (car (car x)))))
(define (caaadr x)  (car (car (car (cdr x)))))
(define (caadar x)  (car (car (cdr (car x)))))
(define (caaddr x)  (car (car (cdr (cdr x)))))
(define (cadaar x)  (car (cdr (car (car x)))))
(define (cadadr x)  (car (cdr (car (cdr x)))))
(define (caddar x)  (car (cdr (cdr (car x)))))
(define (cadddr x)  (car (cdr (cdr (cdr x)))))
(define (cdaaar x)  (cdr (car (car (car x)))))
(define (cdaadr x)  (cdr (car (car (cdr x)))))
(define (cdadar x)  (cdr (car (cdr (car x)))))
(define (cdaddr x)  (cdr (car (cdr (cdr x)))))
(define (cddaar x)  (cdr (cdr (car (car x)))))
(define (cddadr x)  (cdr (cdr (car (cdr x)))))
(define (cdddar x)  (cdr (cdr (cdr (car x)))))
(define (cddddr x)  (cdr (cdr (cdr (cdr x)))))

(def-method cons-id empty? (list-empty? l) (null? l))

(comment def-method cons-id ->string (list->string l) (_string l))

(def-method cons-id eq? (list-eq? x y)
  (if (list? y)
    (let* (list-eql1?
            (lambda (l0 l1)
              (if (list-empty? l0)
                (list-empty? l1)
                (and (eq? (car l0) (car l1)) (list-eql1? (cdr l0) (cdr l1))))))
      (list-eql1? x y))
    #f))

(def-method cons-id nth (list-nth xs index)
  (if xs
    (if (= index 0)
      (car xs)
      (list-nth (cdr xs) (- index 1)))
    '()))

(def-method cons-id foldl (list-foldl f start coll)
  (if (list-empty? coll)
    start
    (list-foldl f (f start (car coll)) (cdr coll))))

(def-method cons-id map (list-map f xs)
  (if (list-empty? xs)
    '()
    (cons (f (car xs)) (list-map f (cdr xs)))))

(def-method cons-id filter (list-filter f xs)
  (if (list-empty? xs)
    '()
    (if (f (car xs))
      (cons (car xs) (list-filter f (cdr xs)))
      (list-filter f (cdr xs)))))

(def-method cons-id append (list-append c0 c1)
  (if (null? c0)
    (->list c1)
    (cons (car c0) (list-append (cdr c0) c1))))

(def-method cons-id find-first (list-find-first f xs)
  (cond ((list-empty? xs) (nothing))
        ((f (car xs)) (maybe (car xs)))
        (#t (list-find-first f (cdr xs)))))

(def-method cons-id ->vector (list->vector xs)
  (foldl (lambda (v x) (_vector-add v x))
         (vector) xs))

(def-method cons-id but-last (list-but-last xs)
  (cond ((null? xs) '())
        ((null? (cdr xs)) '())
        (#t (cons (car xs) (list-but-last (cdr xs))))))

(def-method cons-id reverse (list-reverse xs)
  (foldl
    (lambda (res e) (cons e res))
    '() xs))

(def-method cons-id map-while (list-map-while f p xs)
  (cond ((list-empty? xs) '())
        ((p (car xs)) (cons (f (car xs)) (list-map-while f p (cdr xs))))
        (#t '())))

(def-method cons-id map-until (list-map-until f p xs)
  (cond ((list-empty? xs) '())
        ((p (car xs)) '())
        (#t (cons (f (car xs)) (list-map-until f p (cdr xs))))))

(def-method cons-id take (list-take n c)
  (if (or (list-empty? c) (<= n 0))
    '()
    (cons (car c) (list-take (dec n) (cdr c)))))

(def-method cons-id take-while (list-take-while p c)
  (if (or (list-empty? c) (not (p (car c))))
    '()
    (cons (car c) (list-take-while p (cdr c)))))

(def-method cons-id take-until (list-take-until p c)
  (if (or (list-empty? c) (p (car c)))
    '()
    (cons (car c) (list-take-until p (cdr c)))))

(def-method cons-id drop-while (list-drop-while p c)
  (if (or (list-empty? c) (not (p (car c))))
    c
    (list-drop-while p (cdr c))))

(def-method cons-id drop-until (list-drop-until p c)
  (if (list-empty? c)
    '()
    (if (p (car c))
      c
      (list-drop-until p (cdr c)))))

(def-method cons-id zip (list-zip c0 c1)
  (cond ((list-empty? c0) '())
        ((or (empty? c1) (nothing? c1)) '())
        (#t (cons (list (car c0) (first c1).?)
                  (list-zip (cdr c0) (rest c1).?)))))

(def-method cons-id first (list-first xs)
  (if (null? xs)
    (nothing)
    (maybe (car xs))))

(def-method cons-id second (list-second xs)
  (if (or (null? xs) (null? (cdr xs)))
    (nothing)
    (maybe (cadr xs))))

(def-method cons-id third (list-third xs)
  (if (or (null? xs) (null? (cdr xs)) (null? (cddr xs)))
    (nothing)
    (maybe (caddr xs))))

(def-method cons-id rest (list-rest xs)
  (if (null? xs)
    (nothing)
    (maybe (cdr xs))))

(add-type-fns! cons-id
  (list
;;     (list 'empty? always-false)
;;     (list 'eq? list-eq?)
;;     (list 'nth list-nth)
;;     (list 'foldl list-foldl)
;;     (list 'map list-map)
;;     (list 'filter list-filter)
;;     (list 'append list-append)
;;     (list 'find-first list-find-first)
;;     (list '->vector list->vector)
     (list '->list id)
;;     (list 'copy list-copy)
;;     (list 'but-last list-but-last)
;;     (list 'reverse list-reverse)
;;     (list 'map-while list-map-while)
;;     (list 'map-until list-map-until)
;;     (list 'take list-take)
;;     (list 'take-while list-take-while)
;;     (list 'take-until list-take-until)
;;     (list 'drop-while list-drop-while)
;;     (list 'drop-until list-drop-until)
;;     (list 'zip list-zip)
    (list 'list? always-true)
    (list 'vector? always-false)
    ))
  
(add-type-fns! nil-id
  (list
    (list 'first nothing)
    (list 'second nothing)
    (list 'third nothing)
    (list 'rest nothing)
    (list 'empty? always-true)
    (list 'eq? (lambda (l0 l1) (null? l1)))
    (list 'nth nothing)
    (list 'foldl list-foldl)
    (list 'map list-map)
    (list 'filter list-filter)
    (list 'append list-append)
    (list 'find-first list-find-first)
    (list '->vector list->vector)
    (list '->list id)
    (list 'copy (lambda (x) '()))
    (list 'but-last id)
    (list 'reverse id)
    (list 'map-while list-map-while)
    (list 'map-until list-map-until)
    (list 'take list-take)
    (list 'take-while list-take-while)
    (list 'take-until list-take-until)
    (list 'drop-while list-drop-while)
    (list 'drop-until list-drop-until)
    (list 'zip list-zip)
    (list 'list? always-false)
    (list 'vector? always-false)))
)
