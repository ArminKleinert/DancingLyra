(module seq-map
 [[seq-map->list]
  [seq-map->vector]
  [seq-map-delete]
  [seq-map-find]
  [seq-map-walk]
  [seq-map-insert]
  [seq-map-empty?]
  [seq-map-union]]

(comment
 [->list ->vector all? any? append but-last drop drop-until drop-while empty? filter find-first first foldl foldl1 get map map-until map-while none? nth remove rest reverse second set-at size take take-until take-while third zip])

(let* (seq-map-id (register-type!))
(define-record seq-map-id seq-map entries)

(def-method seq-map-id ->list (seq-map->list m)
  (->list (map ->list entries)))

(def-method seq-map-id ->vector (seq-map->vector m)
  entries)

(def-method seq-map-id append (seq-map-append m entries)

  )

(def-method seq-map-id but-last (seq-map-but-last m)

  )

(def-method seq-map-id drop (seq-map-drop m)

  )

(def-method seq-map-id drop-until (seq-map-drop-until m)

  )

(def-method seq-map-id drop-while (seq-map-drop-while m)

  )

(def-method seq-map-id empty? (seq-map-empty? m)

  )

(def-method seq-map-id filter (seq-map-filter m)

  )

(def-method seq-map-id find-first (seq-map-find-first m)

  )

(def-method seq-map-id first (seq-map-first m)

  )

(def-method seq-map-id foldl (seq-map-foldl m)

  )

(def-method seq-map-id foldl1 (seq-map-foldl1 m)

  )

(def-method seq-map-id get (seq-map-get m)

  )

(def-method seq-map-id map (seq-map-map m)

  )

(def-method seq-map-id map-until (seq-map-map-until m)

  )

(def-method seq-map-id map-while (seq-map-map-while m)

  )

(def-method seq-map-id none? (seq-map-none? m)

  )

(def-method seq-map-id nth (seq-map-nth m)

  )

(def-method seq-map-id remove (seq-map-remove m)

  )

(def-method seq-map-id rest (seq-map-rest m)

  )

(def-method seq-map-id reverse (seq-map-reverse m)

  )

(def-method seq-map-id second (seq-map-second m)

  )

(def-method seq-map-id set-at (seq-map-set-at m)

  )

(def-method seq-map-id size (seq-map-size m)

  )

(def-method seq-map-id take (seq-map-take m)

  )

(def-method seq-map-id take-until (seq-map-take-until m)

  )

(def-method seq-map-id take-while (seq-map-take-while m)

  )

(def-method seq-map-id third (seq-map-third m)

  )

(def-method seq-map-id zip (seq-map-zip m)

  )
))
