(module seq-map
 [[seq-map->list seq-map->list]
  [seq-map->vector seq-map->vector]
  [seq-map-delete seq-map-delete]
  [seq-map-find seq-map-find]
  [seq-map-walk seq-map-walk]
  [seq-map-insert seq-map-insert]
  [seq-map-empty? seq-map-empty?]
  [seq-map-union seq-map-union]]

(comment
 [->list ->vector all? any? append but-last drop drop-until drop-while empty? filter find-first first foldl foldl1 get map map-until map-while none? nth remove rest reverse second set-at size take take-until take-while third zip])
 
 (comment [->list ->vector clone key? value? keys values empty? put put-if-absent get get-default size remove eq? ->string])

(let* (seq-map-id (register-type!)
       entry-id (register-type!))
(define-record seq-map-id seq-map entries)
(define-record entry key value)

(def-method entry-id ->string (entry->string e)
  (string "(" (entry-key e) " " (entry-value e) ")"))

(def-method seq-map-id ->list (seq-map->list m)
  (->list entries))

(def-method seq-map-id ->vector (seq-map->vector m)
  entries)

(def-method seq-map-id append (seq-map-append m entries)
  (make-seq-map (append (seq-map-entries m) entries)))

(def-method seq-map-id ->string (seq-map->string m)
  
  )

(def-method seq-map-id clone (seq-map-clone m)
  
  )

(def-method seq-map-id empty? (seq-map-empty? m)
  (empty? (seq-map-entries m)))

(def-method seq-map-id eq? (seq-map-eq? m)
  
  )

(def-method seq-map-id get (seq-map-get m)
  
  )

(def-method seq-map-id get-default (seq-map-get-default m)
  
  )

(def-method seq-map-id key? (seq-map-key? m)
  
  )

(def-method seq-map-id keys (seq-map-keys m)
  (map entry-key (seq-map-entries m)))

(def-method seq-map-id put (seq-map-put m)
  
  )

(def-method seq-map-id put-if-absent (seq-map-put-if-absent m)
  
  )

(def-method seq-map-id remove (seq-map-remove m)
  
  )

(def-method seq-map-id size (seq-map-size m)
  
  )

(def-method seq-map-id value? (seq-map-value? m)
  (map entry-value (seq-map-entries m)))

(def-method seq-map-id values (seq-map-values m)
  
  )
))
