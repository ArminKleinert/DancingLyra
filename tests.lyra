
(when (not (defined? 'lyra-core-tests-loaded))

(define lyra-core-tests-loaded #t)

(define TODO #f)

; Type-checkers

(define (null?-test)
  (&&
    (not (null? '(1 2 3)))
    (null? '())
    (not (null? [1 2 3]))
    (not (null? []))
    (not (null? 629))
    (not (null? 62.9))
    (not (null? "629"))
    (not (null? #\a))
    (not (null? (box '())))
    (not (null? 'sym))
    (not (null? id))
    (not (null? #t))
    (not (null? #f))
    #t #t
  ))

(define (symbol?-test)
  (&&
    (not (symbol? '(1 2 3)))
    (not (symbol? '()))
    (not (symbol? [1 2 3]))
    (not (symbol? []))
    (not (symbol? 629))
    (not (symbol? 62.9))
    (not (symbol? "629"))
    (not (symbol? #\a))
    (not (symbol? (box '())))
    (symbol? 'sym)
    (not (symbol? id))
    (not (symbol? #t))
    (not (symbol? #f))
    #t #t
  ))

(define (string?-test)
  (&&
    (not (string? '(1 2 3)))
    (not (string? '()))
    (not (string? [1 2 3]))
    (not (string? []))
    (not (string? 629))
    (not (string? 62.9))
    (string? "629")
    (not (string? #\a))
    (not (string? (box '())))
    (not (string? 'sym))
    (not (string? id))
    (not (string? #t))
    (not (string? #f))
    #t #t
  ))

(define (char?-test)
  (&&
    (not (char? '(1 2 3)))
    (not (char? '()))
    (not (char? [1 2 3]))
    (not (char? []))
    (not (char? 629))
    (not (char? 62.9))
    (not (char? "629"))
    (char? #\a)
    (not (char? (box '())))
    (not (char? 'sym))
    (not (char? id))
    (not (char? #t))
    (not (char? #f))
    #t #t
  ))

(define (integer?-test)
  (&&
    (not (integer? '(1 2 3)))
    (not (integer? '()))
    (not (integer? [1 2 3]))
    (not (integer? []))
    (integer? 629)
    (not (integer? 62.9))
    (not (integer? "629"))
    (not (integer? #\a))
    (not (integer? (box '())))
    (not (integer? 'sym))
    (not (integer? id))
    (not (integer? #t))
    (not (integer? #f))
    #t #t
  ))

(define (real?-test)
  (&&
    (not (real? '(1 2 3)))
    (not (real? '()))
    (not (real? [1 2 3]))
    (not (real? []))
    (not (real? 629))
    (real? 62.9)
    (not (real? "629"))
    (not (real? #\a))
    (not (real? (box '())))
    (not (real? 'sym))
    (not (real? id))
    (not (real? #t))
    (not (real? #f))
    #t #t
  ))

(define (cons?-test)
  (&&
    (cons? '(1 2 3))
    (not (cons? '()))
    (not (cons? [1 2 3]))
    (not (cons? []))
    (not (cons? 629))
    (not (cons? 62.9))
    (not (cons? "629"))
    (not (cons? #\a))
    (not (cons? (box '())))
    (not (cons? 'sym))
    (not (cons? id))
    (not (cons? #t))
    (not (cons? #f))
    #t #t
  ))

(define (func?-test)
  (&&
    (not (func? '(1 2 3)))
    (not (func? '()))
    (not (func? [1 2 3]))
    (not (func? []))
    (not (func? 629))
    (not (func? 62.9))
    (not (func? "629"))
    (not (func? #\a))
    (not (func? (box '())))
    (not (func? 'sym))
    (func? id)
    (not (func? #t))
    (not (func? #f))
    #t #t
  ))

(define (bool?-test)
  (&&
    (not (bool? '(1 2 3)))
    (not (bool? '()))
    (not (bool? [1 2 3]))
    (not (bool? []))
    (not (bool? 629))
    (not (bool? 62.9))
    (not (bool? "629"))
    (not (bool? #\a))
    (not (bool? (box '())))
    (not (bool? 'sym))
    (not (bool? id))
    (bool? #t)
    (bool? #f)
    #t #t
  ))

(define (box?-test)
  (&&
    (not (box? '(1 2 3)))
    (not (box? '()))
    (not (box? [1 2 3]))
    (not (box? []))
    (not (box? 629))
    (not (box? 62.9))
    (not (box? "629"))
    (not (box? #\a))
    (box? (box '()))
    (not (box? 'sym))
    (not (box? id))
    (not (box? #t))
    (not (box? #f))
    #t #t
  ))

(define (list?-test)
  (&&
    (list? '(1 2 3))
    (not (list? '()))
    (not (list? [1 2 3]))
    (not (list? []))
    (not (list? 629))
    (not (list? 62.9))
    (not (list? "629"))
    (not (list? #\a))
    (not (list? (box '())))
    (not (list? 'sym))
    (not (list? id))
    (not (list? #t))
    (not (list? #f))
    #t #t
  ))

(define (vector?-test)
  (&&
    (not (vector? '(1 2 3)))
    (not (vector? '()))
    (vector? [1 2 3])
    (vector? [])
    (not (vector? 629))
    (not (vector? 62.9))
    (not (vector? "629"))
    (not (vector? #\a))
    (not (vector? (box '())))
    (not (vector? 'sym))
    (not (vector? id))
    (not (vector? #t))
    (not (vector? #f))
    #t #t
  ))

; Test eq? function
  
(define (eq?-list-test)
  (&&
    (eq? '(1 2 3) '(1 2 3))
    (not (eq? '(1 2 3) '()))
    (not (eq? '(1 2 3) [1 2 3]))
    (not (eq? '(1 2 3) []))
    (not (eq? '(1 2 3) 629))
    (not (eq? '(1 2 3) 62.9))
    (not (eq? '(1 2 3) "629"))
    (not (eq? '(1 2 3) #\a))
    (not (eq? '(1 2 3) (box '())))
    (not (eq? '(1 2 3) 'sym))
    (not (eq? '(1 2 3) id))
    (not (eq? '(1 2 3) #t))
    (not (eq? '(1 2 3) #f))
    #t #t
  ))

(define (eq?-nil-test)
  (&&
    (not (eq? '() '(1 2 3)))
    (eq? '() '())
    (not (eq? '() [1 2 3]))
    (not (eq? '() []))
    (not (eq? '() 629))
    (not (eq? '() 62.9))
    (not (eq? '() "629"))
    (not (eq? '() #\a))
    (not (eq? '() (box '())))
    (not (eq? '() 'sym))
    (not (eq? '() id))
    (not (eq? '() #t))
    (not (eq? '() #f))
    #t #t
  ))

(define (eq?-vector-test)
  (&&
    (not (eq? [1 2 3] '(1 2 3)))
    (not (eq? [1 2 3] '()))
    (eq? [1 2 3] [1 2 3])
    (not (eq? [1 2 3] []))
    (not (eq? [1 2 3] 629))
    (not (eq? [1 2 3] 62.9))
    (not (eq? [1 2 3] "629"))
    (not (eq? [1 2 3] #\a))
    (not (eq? [1 2 3] (box '())))
    (not (eq? [1 2 3] 'sym))
    (not (eq? [1 2 3] id))
    (not (eq? [1 2 3] #t))
    (not (eq? [1 2 3] #f))
    (not (eq? [] '(1 2 3)))
    (not (eq? [] '()))
    (not (eq? [] [1 2 3]))
    (eq? [] [])
    (not (eq? [] 629))
    (not (eq? [] 62.9))
    (not (eq? [] "629"))
    (not (eq? [] #\a))
    (not (eq? [] (box '())))
    (not (eq? [] 'sym))
    (not (eq? [] id))
    (not (eq? [] #t))
    (not (eq? [] #f))
    #t #t
  ))

(define (eq?-integer-test)
  (&&
    (not (eq? 629 '(1 2 3)))
    (not (eq? 629 '()))
    (not (eq? 629 [1 2 3]))
    (not (eq? 629 []))
    (eq? 629 629)
    (not (eq? 629 62.9))
    (not (eq? 629 "629"))
    (not (eq? 629 #\a))
    (not (eq? 629 (box '())))
    (not (eq? 629 'sym))
    (not (eq? 629 id))
    (not (eq? 629 #t))
    (not (eq? 629 #f))
    #t #t
  ))

(define (eq?-real-test)
  (&&
    (not (eq? 62.9 '(1 2 3)))
    (not (eq? 62.9 '()))
    (not (eq? 62.9 [1 2 3]))
    (not (eq? 62.9 []))
    (not (eq? 62.9 629))
    (eq? 62.9 62.9)
    (not (eq? 62.9 "629"))
    (not (eq? 62.9 #\a))
    (not (eq? 62.9 (box '())))
    (not (eq? 62.9 'sym))
    (not (eq? 62.9 id))
    (not (eq? 62.9 #t))
    (not (eq? 62.9 #f))
    #t #t
  ))

(define (eq?-string-test)
  (&&
    (not (eq? "629" '(1 2 3)))
    (not (eq? "629" '()))
    (not (eq? "629" [1 2 3]))
    (not (eq? "629" []))
    (not (eq? "629" 629))
    (not (eq? "629" 62.9))
    (eq? "629" "629")
    (not (eq? "629" #\a))
    (not (eq? "629" (box '())))
    (not (eq? "629" 'sym))
    (not (eq? "629" id))
    (not (eq? "629" #t))
    (not (eq? "629" #f))
    #t #t
  ))

(define (eq?-char-test)
  (&&
    (not (eq? #\a '(1 2 3)))
    (not (eq? #\a '()))
    (not (eq? #\a [1 2 3]))
    (not (eq? #\a []))
    (not (eq? #\a 629))
    (not (eq? #\a 62.9))
    (not (eq? #\a "629"))
    (eq? #\a #\a)
    (not (eq? #\a (box '())))
    (not (eq? #\a 'sym))
    (not (eq? #\a id))
    (not (eq? #\a #t))
    (not (eq? #\a #f))
    #t #t
  ))

(define (eq?-box-test)
  (&&
    (not (eq? (box '()) '(1 2 3)))
    (not (eq? (box '()) '()))
    (not (eq? (box '()) [1 2 3]))
    (not (eq? (box '()) []))
    (not (eq? (box '()) 629))
    (not (eq? (box '()) 62.9))
    (not (eq? (box '()) "629"))
    (not (eq? (box '()) #\a))
    (not (eq? (box '()) (box '()))) ; Comparison with boxes is always #f
    (not (eq? (box '()) 'sym))
    (not (eq? (box '()) id))
    (not (eq? (box '()) #t))
    (not (eq? (box '()) #f))
    #t #t
  ))

(define (eq?-symbol-test)
  (&&
    (not (eq? 'sym '(1 2 3)))
    (not (eq? 'sym '()))
    (not (eq? 'sym [1 2 3]))
    (not (eq? 'sym []))
    (not (eq? 'sym 629))
    (not (eq? 'sym 62.9))
    (not (eq? 'sym "629"))
    (not (eq? 'sym #\a))
    (not (eq? 'sym (box '())))
    (eq? 'sym 'sym)
    (not (eq? 'sym id))
    (not (eq? 'sym #t))
    (not (eq? 'sym #f))
    #t #t
  ))

(define (eq?-function-test)
  (&&
    (not (eq? id '(1 2 3)))
    (not (eq? id '()))
    (not (eq? id [1 2 3]))
    (not (eq? id []))
    (not (eq? id 629))
    (not (eq? id 62.9))
    (not (eq? id "629"))
    (not (eq? id #\a))
    (not (eq? id (box '())))
    (not (eq? id 'sym))
    (eq? id id)
    (not (eq? id #t))
    (not (eq? id #f))
    #t #t
  ))

(define (eq?-boolean-test)
  (&&
    (not (eq? #t '(1 2 3)))
    (not (eq? #t '()))
    (not (eq? #t [1 2 3]))
    (not (eq? #t []))
    (not (eq? #t 629))
    (not (eq? #t 62.9))
    (not (eq? #t "629"))
    (not (eq? #t #\a))
    (not (eq? #t (box '())))
    (not (eq? #t 'sym))
    (not (eq? #t id))
    (eq? #t #t)
    (not (eq? #t #f))
    (not (eq? #f '(1 2 3)))
    (not (eq? #f '()))
    (not (eq? #f [1 2 3]))
    (not (eq? #f []))
    (not (eq? #f 629))
    (not (eq? #f 62.9))
    (not (eq? #f "629"))
    (not (eq? #f #\a))
    (not (eq? #f (box '())))
    (not (eq? #f 'sym))
    (not (eq? #f id))
    (not (eq? #f #t))
    (eq? #f #f)
    #t #t
  ))

; Test collection functions

(define (first-list-test)
  (&&
    (eq? '() (first '()))
    (eq? 1 (first (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '() (first (list '() '() '())))
    (eq? [] (first (list [] [] [])))
    (eq? "a" (first (list "a" "b" "c")))
    (eq? 1.0 (first (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (eq? + (first (list + - * / % id)))
    (eq? 'x (first (list 'x 'y 'z 'abc 'def)))
    (eq? #\x (first (list #\x #\y #\z #\space #\newline)))
    (eq? '(1 2 3) (first (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? [1 2 3] (first (list [1 2 3] [2 3 4] [3 4 5])))
    #t #t
  ))

(define (first-vector-test)
  (&&
    (eq? '() (first []))
    (eq? 1 (first [1 2 3 4 5 6 7 8 9 10]))
    (eq? '() (first ['() '() '()]))
    (eq? [] (first [[] [] []]))
    (eq? "a" (first ["a" "b" "c"]))
    (eq? 1.0 (first [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
    (eq? + (first [+ - * / % id]))
    (eq? 'x (first ['x 'y 'z 'abc 'def]))
    (eq? #\x (first [#\x #\y #\z #\space #\newline]))
    (eq? '(1 2 3) (first ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [1 2 3] (first [[1 2 3] [2 3 4] [3 4 5]]))
    #t #t
  ))

(define (second-list-test)
  (&&
    (eq? '() (second '()))
    (eq? 2 (second (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '() (second (list '() '() '())))
    (eq? [] (second (list [] [] [])))
    (eq? "b" (second (list "a" "b" "c")))
    (eq? 2.0 (second (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (eq? - (second (list + - * / % id)))
    (eq? 'y (second (list 'x 'y 'z 'abc 'def)))
    (eq? #\y (second (list #\x #\y #\z #\space #\newline)))
    (eq? '(2 3 4) (second (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? [2 3 4] (second (list [1 2 3] [2 3 4] [3 4 5])))
    #t #t
  ))

(define (second-vector-test)
  (&&
    (eq? '() (second []))
    (eq? 2 (second [1 2 3 4 5 6 7 8 9 10]))
    (eq? '() (second ['() '() '()]))
    (eq? [] (second [[] [] []]))
    (eq? "b" (second ["a" "b" "c"]))
    (eq? 2.0 (second [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
    (eq? - (second [+ - * / % id]))
    (eq? 'y (second ['x 'y 'z 'abc 'def]))
    (eq? #\y (second [#\x #\y #\z #\space #\newline]))
    (eq? '(2 3 4) (second ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [2 3 4] (second [[1 2 3] [2 3 4] [3 4 5]]))
    #t #t
  ))

(define (third-list-test)
  (&&
    (eq? '() (third '()))
    (eq? 3 (third (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '() (third (list '() '() '())))
    (eq? [] (third (list [] [] [])))
    (eq? "c" (third (list "a" "b" "c")))
    (eq? 3.0 (third (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (eq? * (third (list + - * / % id)))
    (eq? 'z (third (list 'x 'y 'z 'abc 'def)))
    (eq? #\z (third (list #\x #\y #\z #\space #\newline)))
    (eq? '(3 4 5) (third (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? [3 4 5] (third (list [1 2 3] [2 3 4] [3 4 5])))
    #t #t
  ))

(define (third-vector-test)
  (&&
    (eq? '() (third []))
    (eq? 3 (third [1 2 3 4 5 6 7 8 9 10]))
    (eq? '() (third ['() '() '()]))
    (eq? [] (third [[] [] []]))
    (eq? "c" (third ["a" "b" "c"]))
    (eq? 3.0 (third [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
    (eq? * (third [+ - * / % id]))
    (eq? 'z (third ['x 'y 'z 'abc 'def]))
    (eq? #\z (third [#\x #\y #\z #\space #\newline]))
    (eq? '(3 4 5) (third ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [3 4 5] (third [[1 2 3] [2 3 4] [3 4 5]]))
    #t #t
  ))

(define (rest-list-test)
  (&&
    (eq? '() (rest '()))
    (eq? (list 2 3 4 5 6 7 8 9 10) (rest (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list '() '()) (rest (list '() '() '())))
    (eq? (list [] []) (rest (list [] [] [])))
    (eq? (list "a" "b" "c") (rest (list "a" "b" "c")))
    (eq? (list 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0) (rest (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (eq? (list - * / % id) (rest (list + - * / % id)))
    (eq? (list 'y 'z 'abc 'def) (rest (list 'x 'y 'z 'abc 'def)))
    (eq? (list #\y #\z #\space #\newline) (rest (list #\x #\y #\z #\space #\newline)))
    (eq? (list '(2 3 4) '(3 4 5)) (rest (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list [2 3 4] [3 4 5]) (rest (list [1 2 3] [2 3 4] [3 4 5])))
    #t #t
  ))

(define (rest-vector-test)
  (&&
    (eq? [] (rest []))
    (eq? [2 3 4 5 6 7 8 9 10] (rest [1 2 3 4 5 6 7 8 9 10]))
    (eq? ['() '()] (rest ['() '() '()]))
    (eq? [[] []] (rest [[] [] []]))
    (eq? ["b" "c"] (rest ["a" "b" "c"]))
    (eq? [2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0] (rest [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
    (eq? [- * / % id] (rest [+ - * / % id]))
    (eq? ['y 'z 'abc 'def] (rest ['x 'y 'z 'abc 'def]))
    (eq? [#\y #\z #\space #\newline] (rest [#\x #\y #\z #\space #\newline]))
    (eq? ['(2 3 4) '(3 4 5)] (rest ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [[2 3 4] [3 4 5]] (rest [[1 2 3] [2 3 4] [3 4 5]]))
    #t #t
  ))

(define (nth-list-test)
  (&&
    (eq? '() (nth '() 0))
    (eq? 1 (nth (list 1 2 3 4 5 6 7 8 9 10) 0))
    (eq? '() (nth (list '() '() '()) 0))
    (eq? [] (nth (list [] [] []) 0))
    (eq? "a" (nth (list "a" "b" "c") 0))
    (eq? 1.0 (nth (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0) 0))
    (eq? + (nth (list + - * / % id) 0))
    (eq? 'x (nth (list 'x 'y 'z 'abc 'def) 0))
    (eq? #\x (nth (list #\x #\y #\z #\space #\newline) 0))
    (eq? '(1 2 3) (nth (list '(1 2 3) '(2 3 4) '(3 4 5)) 0))
    (eq? [1 2 3] (nth (list [1 2 3] [2 3 4] [3 4 5]) 0))
    
    (eq? '() (nth '() 1))
    (eq? 2 (nth (list 1 2 3 4 5 6 7 8 9 10) 1))
    (eq? '() (nth (list '() '() '()) 1))
    (eq? [] (nth (list [] [] []) 1))
    (eq? "b" (nth (list "a" "b" "c") 1))
    (eq? 2.0 (nth (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0) 1))
    (eq? - (nth (list + - * / % id) 1))
    (eq? 'y (nth (list 'x 'y 'z 'abc 'def) 1))
    (eq? #\y (nth (list #\x #\y #\z #\space #\newline) 1))
    (eq? '(2 3 4) (nth (list '(1 2 3) '(2 3 4) '(3 4 5)) 1))
    (eq? [2 3 4] (nth (list [1 2 3] [2 3 4] [3 4 5]) 1))
    
    (eq? '() (nth '() 2))
    (eq? 3 (nth (list 1 2 3 4 5 6 7 8 9 10) 2))
    (eq? '() (nth (list '() '() '()) 2))
    (eq? [] (nth (list [] [] []) 2))
    (eq? "c" (nth (list "a" "b" "c") 2))
    (eq? 3.0 (nth (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0) 2))
    (eq? * (nth (list + - * / % id) 2))
    (eq? 'z (nth (list 'x 'y 'z 'abc 'def) 2))
    (eq? #\z (nth (list #\x #\y #\z #\space #\newline) 2))
    (eq? '(3 4 5) (nth (list '(1 2 3) '(2 3 4) '(3 4 5)) 2))
    (eq? [3 4 5] (nth (list [1 2 3] [2 3 4] [3 4 5]) 2))
    #t #t
  ))

(define (nth-vector-test)
  (&&
    (eq? '() (nth [] 0))
    (eq? 1 (nth [1 2 3 4 5 6 7 8 9 10] 0))
    (eq? '() (nth ['() '() '()] 0))
    (eq? [] (nth [[] [] []] 0))
    (eq? "a" (nth ["a" "b" "c"] 0))
    (eq? 1.0 (nth [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0] 0))
    (eq? + (nth [+ - * / % id] 0))
    (eq? 'x (nth ['x 'y 'z 'abc 'def] 0))
    (eq? #\x (nth [#\x #\y #\z #\space #\newline] 0))
    (eq? '(1 2 3) (nth ['(1 2 3) '(2 3 4) '(3 4 5)] 0))
    (eq? [1 2 3] (nth [[1 2 3] [2 3 4] [3 4 5]] 0))
    
    (eq? '() (nth [] 1))
    (eq? 2 (nth [1 2 3 4 5 6 7 8 9 10] 1))
    (eq? '() (nth ['() '() '()] 1))
    (eq? [] (nth [[] [] []] 1))
    (eq? "b" (nth ["a" "b" "c"] 1))
    (eq? 2.0 (nth [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0] 1))
    (eq? - (nth [+ - * / % id] 1))
    (eq? 'y (nth ['x 'y 'z 'abc 'def] 1))
    (eq? #\y (nth [#\x #\y #\z #\space #\newline] 1))
    (eq? '(2 3 4) (nth ['(1 2 3) '(2 3 4) '(3 4 5)] 1))
    (eq? [2 3 4] (nth [[1 2 3] [2 3 4] [3 4 5]] 1))
    
    (eq? '() (nth [] 2))
    (eq? 3 (nth [1 2 3 4 5 6 7 8 9 10] 2))
    (eq? '() (nth ['() '() '()] 2))
    (eq? [] (nth [[] [] []] 2))
    (eq? "c" (nth ["a" "b" "c"] 2))
    (eq? 3.0 (nth [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0] 2))
    (eq? * (nth [+ - * / % id] 2))
    (eq? 'z (nth ['x 'y 'z 'abc 'def] 2))
    (eq? #\z (nth [#\x #\y #\z #\space #\newline] 2))
    (eq? '(3 4 5) (nth ['(1 2 3) '(2 3 4) '(3 4 5)] 2))
    (eq? [3 4 5] (nth [[1 2 3] [2 3 4] [3 4 5]] 2))
    #t #t
  ))

(define (empty?-list-test)
  (&&
    (empty? '())
    (not (empty? '(1 2 3 4 5 6 7 8 9 10)))
    (not (empty? '('() '() '())))
    (not (empty? '([] [] [])))
    (not (empty? '("a" "b" "c")))
    (not (empty? '(1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (not (empty? '(+ - * / % id)))
    (not (empty? '('x 'y 'z 'abc 'def)))
    (not (empty? '(#\x #\y #\z #\space #\newline)))
    (not (empty? '('(1 2 3) '(2 3 4) '(3 4 5))))
    (not (empty? '([1 2 3] [2 3 4] [3 4 5])))
    #t #t
  ))

(define (empty?-vector-test)
  (&&
    (empty? [])
    (not (empty? [1 2 3 4 5 6 7 8 9 10]))
    (not (empty? ['() '() '()]))
    (not (empty? [[] [] []]))
    (not (empty? ["a" "b" "c"]))
    (not (empty? [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
    (not (empty? [+ - * / % id]))
    (not (empty? ['x 'y 'z 'abc 'def]))
    (not (empty? [#\x #\y #\z #\space #\newline]))
    (not (empty? ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (not (empty? [[1 2 3] [2 3 4] [3 4 5]]))
    #t #t
  ))



(define (zip-test)
  (&&
    (eq? (list (list 1 2) (list 3 4)) (zip '(1 3) '(2 4)))
    (eq? (list (list 1 2) (list 3 4)) (zip '(1 3) '(2 4 5)))
    
    (eq? '() (zip '() '(1 2 3 4 5)))
    (eq? '() (zip '() '()))
    
    (eq? (vector [1 2] [3 4]) (zip [1 3] [2 4]))
    (eq? (vector [1 2] [3 4]) (zip [1 3] [2 4 5]))
    
    (eq? '() (zip '() [1 2 3 4 5]))
    (eq? '() (zip '() '()))
    
    (eq? [] (zip [] [1 2 3 4 5]))
    (eq? [] (zip [] '()))
    
    (eq? (list (list 1 2) (list 3 4)) (zip '(1 3) [2 4]))
    (eq? (list (list 1 2) (list 3 4)) (zip '(1 3) [2 4 5]))
    (eq? (vector [1 2] [3 4]) (zip [1 3] '(2 4)))
    (eq? (vector [1 2] [3 4]) (zip [1 3] '(2 4 5)))
    #t #t
  ))




)



(println! (string "(null?-test): ............... " (null?-test)))
(println! (string "(symbol?-test): ............. " (symbol?-test)))
(println! (string "(string?-test): ............. " (string?-test)))
(println! (string "(char?-test): ............... " (char?-test)))
(println! (string "(integer?-test): ............ " (integer?-test)))
(println! (string "(real?-test): ............... " (real?-test)))
(println! (string "(cons?-test): ............... " (cons?-test)))
(println! (string "(func?-test): ............... " (func?-test)))
(println! (string "(bool?-test): ............... " (bool?-test)))
(println! (string "(box?-test): ................ " (box?-test)))
(println! (string "(list?-test): ............... " (list?-test)))
(println! (string "(vector?-test): ............. " (vector?-test)))
(println! "")
(println! (string "(eq?-list-test): ............ " (eq?-list-test)))
(println! (string "(eq?-nil-test): ............. " (eq?-nil-test)))
(println! (string "(eq?-vector-test): .......... " (eq?-vector-test)))
(println! (string "(eq?-integer-test): ......... " (eq?-integer-test)))
(println! (string "(eq?-real-test): ............ " (eq?-real-test)))
(println! (string "(eq?-string-test): .......... " (eq?-string-test)))
(println! (string "(eq?-char-test): ............ " (eq?-char-test)))
(println! (string "(eq?-box-test): ............. " (eq?-box-test)))
(println! (string "(eq?-symbol-test): .......... " (eq?-symbol-test)))
(println! (string "(eq?-function-test): ........ " (eq?-function-test)))
(println! (string "(eq?-boolean-test): ......... " (eq?-boolean-test)))
(println! "")
(println! (string "(first-list-test): .......... " (first-list-test)))
(println! (string "(first-vector-test): ........ " (first-vector-test)))
(println! (string "(second-list-test): ......... " (second-list-test)))
(println! (string "(second-vector-test): ....... " (second-vector-test)))
(println! (string "(third-list-test): .......... " (third-list-test)))
(println! (string "(third-vector-test): ........ " (third-vector-test)))
(println! (string "(rest-list-test): ........... " (rest-list-test)))
(println! (string "(rest-vector-test): ......... " (rest-vector-test)))
(println! (string "(nth-list-test): ............ " (nth-list-test)))
(println! (string "(nth-vector-test): .......... " (nth-vector-test)))
(println! "")
(println! (string "(empty?-list-test): ......... " (empty?-list-test)))
(println! (string "(empty?-vector-test): ....... " (empty?-vector-test)))

(comment println! [
    (eq? '() (nth '() 0))
    (eq? 1 (nth (list 1 2 3 4 5 6 7 8 9 10) 0))
    (eq? '() (nth (list '() '() '()) 0))
    (eq? [] (nth (list [] [] []) 0))
    (eq? "a" (nth (list "a" "b" "c") 0))
    (eq? 1.0 (nth (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0) 0))
    (eq? + (nth (list + - * / % id) 0))
    (eq? 'x (nth (list 'x 'y 'z 'abc 'def) 0))
    (eq? #\x (nth (list #\x #\y #\z #\space #\newline) 0))
    (eq? '(1 2 3) (nth (list '(1 2 3) '(2 3 4) '(3 4 5)) 0))
    (eq? [1 2 3] (nth (list [1 2 3] [2 3 4] [3 4 5]) 0))
    ])

'lyra-core-tests-loaded

