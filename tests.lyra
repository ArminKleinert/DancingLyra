
(when (not (defined? 'lyra-core-tests-loaded))

(define lyra-core-tests-loaded #t)

; Type-checkers

(define (null?-test)
  (&&
    (not (null? '(1 2 3)))
    (null? '())
    (not (null? [1 2 3]))
    (not (null? []))
    (not (null? 629))
    (not (null? 62.9))
    (not (null? "629"))
    (not (null? #\a))
    (not (null? (box '())))
    (not (null? 'sym))
    (not (null? id))
    (not (null? #t))
    (not (null? #f))
    #t #t
  ))

(define (symbol?-test)
  (&&
    (not (symbol? '(1 2 3)))
    (not (symbol? '()))
    (not (symbol? [1 2 3]))
    (not (symbol? []))
    (not (symbol? 629))
    (not (symbol? 62.9))
    (not (symbol? "629"))
    (not (symbol? #\a))
    (not (symbol? (box '())))
    (symbol? 'sym)
    (not (symbol? id))
    (not (symbol? #t))
    (not (symbol? #f))
    #t #t
  ))

(define (string?-test)
  (&&
    (not (string? '(1 2 3)))
    (not (string? '()))
    (not (string? [1 2 3]))
    (not (string? []))
    (not (string? 629))
    (not (string? 62.9))
    (string? "629")
    (not (string? #\a))
    (not (string? (box '())))
    (not (string? 'sym))
    (not (string? id))
    (not (string? #t))
    (not (string? #f))
    #t #t
  ))

(define (char?-test)
  (&&
    (not (char? '(1 2 3)))
    (not (char? '()))
    (not (char? [1 2 3]))
    (not (char? []))
    (not (char? 629))
    (not (char? 62.9))
    (not (char? "629"))
    (char? #\a)
    (not (char? (box '())))
    (not (char? 'sym))
    (not (char? id))
    (not (char? #t))
    (not (char? #f))
    #t #t
  ))

(define (integer?-test)
  (&&
    (not (integer? '(1 2 3)))
    (not (integer? '()))
    (not (integer? [1 2 3]))
    (not (integer? []))
    (integer? 629)
    (not (integer? 62.9))
    (not (integer? "629"))
    (not (integer? #\a))
    (not (integer? (box '())))
    (not (integer? 'sym))
    (not (integer? id))
    (not (integer? #t))
    (not (integer? #f))
    #t #t
  ))

(define (real?-test)
  (&&
    (not (real? '(1 2 3)))
    (not (real? '()))
    (not (real? [1 2 3]))
    (not (real? []))
    (not (real? 629))
    (real? 62.9)
    (not (real? "629"))
    (not (real? #\a))
    (not (real? (box '())))
    (not (real? 'sym))
    (not (real? id))
    (not (real? #t))
    (not (real? #f))
    #t #t
  ))

(define (cons?-test)
  (&&
    (cons? '(1 2 3))
    (not (cons? '()))
    (not (cons? [1 2 3]))
    (not (cons? []))
    (not (cons? 629))
    (not (cons? 62.9))
    (not (cons? "629"))
    (not (cons? #\a))
    (not (cons? (box '())))
    (not (cons? 'sym))
    (not (cons? id))
    (not (cons? #t))
    (not (cons? #f))
    #t #t
  ))

(define (func?-test)
  (&&
    (not (func? '(1 2 3)))
    (not (func? '()))
    (not (func? [1 2 3]))
    (not (func? []))
    (not (func? 629))
    (not (func? 62.9))
    (not (func? "629"))
    (not (func? #\a))
    (not (func? (box '())))
    (not (func? 'sym))
    (func? id)
    (not (func? #t))
    (not (func? #f))
    #t #t
  ))

(define (bool?-test)
  (&&
    (not (bool? '(1 2 3)))
    (not (bool? '()))
    (not (bool? [1 2 3]))
    (not (bool? []))
    (not (bool? 629))
    (not (bool? 62.9))
    (not (bool? "629"))
    (not (bool? #\a))
    (not (bool? (box '())))
    (not (bool? 'sym))
    (not (bool? id))
    (bool? #t)
    (bool? #f)
    #t #t
  ))

(define (box?-test)
  (&&
    (not (box? '(1 2 3)))
    (not (box? '()))
    (not (box? [1 2 3]))
    (not (box? []))
    (not (box? 629))
    (not (box? 62.9))
    (not (box? "629"))
    (not (box? #\a))
    (box? (box '()))
    (not (box? 'sym))
    (not (box? id))
    (not (box? #t))
    (not (box? #f))
    #t #t
  ))

(define (list?-test)
  (&&
    (list? '(1 2 3))
    (not (list? '()))
    (not (list? [1 2 3]))
    (not (list? []))
    (not (list? 629))
    (not (list? 62.9))
    (not (list? "629"))
    (not (list? #\a))
    (not (list? (box '())))
    (not (list? 'sym))
    (not (list? id))
    (not (list? #t))
    (not (list? #f))
    #t #t
  ))

(define (vector?-test)
  (&&
    (not (vector? '(1 2 3)))
    (not (vector? '()))
    (vector? [1 2 3])
    (vector? [])
    (not (vector? 629))
    (not (vector? 62.9))
    (not (vector? "629"))
    (not (vector? #\a))
    (not (vector? (box '())))
    (not (vector? 'sym))
    (not (vector? id))
    (not (vector? #t))
    (not (vector? #f))
    #t #t
  ))

; Test eql? function
  
(define (eql?-list-test)
  (&&
    (eql? '(1 2 3) '(1 2 3))
    (not (eql? '(1 2 3) '()))
    (not (eql? '(1 2 3) [1 2 3]))
    (not (eql? '(1 2 3) []))
    (not (eql? '(1 2 3) 629))
    (not (eql? '(1 2 3) 62.9))
    (not (eql? '(1 2 3) "629"))
    (not (eql? '(1 2 3) #\a))
    (not (eql? '(1 2 3) (box '())))
    (not (eql? '(1 2 3) 'sym))
    (not (eql? '(1 2 3) id))
    (not (eql? '(1 2 3) #t))
    (not (eql? '(1 2 3) #f))
    #t #t
  ))

(define (eql?-nil-test)
  (&&
    (not (eql? '() '(1 2 3)))
    (eql? '() '())
    (not (eql? '() [1 2 3]))
    (not (eql? '() []))
    (not (eql? '() 629))
    (not (eql? '() 62.9))
    (not (eql? '() "629"))
    (not (eql? '() #\a))
    (not (eql? '() (box '())))
    (not (eql? '() 'sym))
    (not (eql? '() id))
    (not (eql? '() #t))
    (not (eql? '() #f))
    #t #t
  ))

(define (eql?-vector-test)
  (&&
    (not (eql? [1 2 3] '(1 2 3)))
    (not (eql? [1 2 3] '()))
    (eql? [1 2 3] [1 2 3])
    (not (eql? [1 2 3] []))
    (not (eql? [1 2 3] 629))
    (not (eql? [1 2 3] 62.9))
    (not (eql? [1 2 3] "629"))
    (not (eql? [1 2 3] #\a))
    (not (eql? [1 2 3] (box '())))
    (not (eql? [1 2 3] 'sym))
    (not (eql? [1 2 3] id))
    (not (eql? [1 2 3] #t))
    (not (eql? [1 2 3] #f))
    (not (eql? [] '(1 2 3)))
    (not (eql? [] '()))
    (not (eql? [] [1 2 3]))
    (eql? [] [])
    (not (eql? [] 629))
    (not (eql? [] 62.9))
    (not (eql? [] "629"))
    (not (eql? [] #\a))
    (not (eql? [] (box '())))
    (not (eql? [] 'sym))
    (not (eql? [] id))
    (not (eql? [] #t))
    (not (eql? [] #f))
    #t #t
  ))

(define (eql?-integer-test)
  (&&
    (not (eql? 629 '(1 2 3)))
    (not (eql? 629 '()))
    (not (eql? 629 [1 2 3]))
    (not (eql? 629 []))
    (eql? 629 629)
    (not (eql? 629 62.9))
    (not (eql? 629 "629"))
    (not (eql? 629 #\a))
    (not (eql? 629 (box '())))
    (not (eql? 629 'sym))
    (not (eql? 629 id))
    (not (eql? 629 #t))
    (not (eql? 629 #f))
    #t #t
  ))

(define (eql?-real-test)
  (&&
    (not (eql? 62.9 '(1 2 3)))
    (not (eql? 62.9 '()))
    (not (eql? 62.9 [1 2 3]))
    (not (eql? 62.9 []))
    (not (eql? 62.9 629))
    (eql? 62.9 62.9)
    (not (eql? 62.9 "629"))
    (not (eql? 62.9 #\a))
    (not (eql? 62.9 (box '())))
    (not (eql? 62.9 'sym))
    (not (eql? 62.9 id))
    (not (eql? 62.9 #t))
    (not (eql? 62.9 #f))
    #t #t
  ))

(define (eql?-string-test)
  (&&
    (not (eql? "629" '(1 2 3)))
    (not (eql? "629" '()))
    (not (eql? "629" [1 2 3]))
    (not (eql? "629" []))
    (not (eql? "629" 629))
    (not (eql? "629" 62.9))
    (eql? "629" "629")
    (not (eql? "629" #\a))
    (not (eql? "629" (box '())))
    (not (eql? "629" 'sym))
    (not (eql? "629" id))
    (not (eql? "629" #t))
    (not (eql? "629" #f))
    #t #t
  ))

(define (eql?-char-test)
  (&&
    (not (eql? #\a '(1 2 3)))
    (not (eql? #\a '()))
    (not (eql? #\a [1 2 3]))
    (not (eql? #\a []))
    (not (eql? #\a 629))
    (not (eql? #\a 62.9))
    (not (eql? #\a "629"))
    (eql? #\a #\a)
    (not (eql? #\a (box '())))
    (not (eql? #\a 'sym))
    (not (eql? #\a id))
    (not (eql? #\a #t))
    (not (eql? #\a #f))
    #t #t
  ))

(define (eql?-box-test)
  (&&
    (not (eql? (box '()) '(1 2 3)))
    (not (eql? (box '()) '()))
    (not (eql? (box '()) [1 2 3]))
    (not (eql? (box '()) []))
    (not (eql? (box '()) 629))
    (not (eql? (box '()) 62.9))
    (not (eql? (box '()) "629"))
    (not (eql? (box '()) #\a))
    (not (eql? (box '()) (box '()))) ; Comparison with boxes is always #f
    (not (eql? (box '()) 'sym))
    (not (eql? (box '()) id))
    (not (eql? (box '()) #t))
    (not (eql? (box '()) #f))
    #t #t
  ))

(define (eql?-symbol-test)
  (&&
    (not (eql? 'sym '(1 2 3)))
    (not (eql? 'sym '()))
    (not (eql? 'sym [1 2 3]))
    (not (eql? 'sym []))
    (not (eql? 'sym 629))
    (not (eql? 'sym 62.9))
    (not (eql? 'sym "629"))
    (not (eql? 'sym #\a))
    (not (eql? 'sym (box '())))
    (eql? 'sym 'sym)
    (not (eql? 'sym id))
    (not (eql? 'sym #t))
    (not (eql? 'sym #f))
    #t #t
  ))

(define (eql?-function-test)
  (&&
    (not (eql? id '(1 2 3)))
    (not (eql? id '()))
    (not (eql? id [1 2 3]))
    (not (eql? id []))
    (not (eql? id 629))
    (not (eql? id 62.9))
    (not (eql? id "629"))
    (not (eql? id #\a))
    (not (eql? id (box '())))
    (not (eql? id 'sym))
    (eql? id id)
    (not (eql? id #t))
    (not (eql? id #f))
    #t #t
  ))

(define (eql?-boolean-test)
  (&&
    (not (eql? #t '(1 2 3)))
    (not (eql? #t '()))
    (not (eql? #t [1 2 3]))
    (not (eql? #t []))
    (not (eql? #t 629))
    (not (eql? #t 62.9))
    (not (eql? #t "629"))
    (not (eql? #t #\a))
    (not (eql? #t (box '())))
    (not (eql? #t 'sym))
    (not (eql? #t id))
    (eql? #t #t)
    (not (eql? #t #f))
    (not (eql? #f '(1 2 3)))
    (not (eql? #f '()))
    (not (eql? #f [1 2 3]))
    (not (eql? #f []))
    (not (eql? #f 629))
    (not (eql? #f 62.9))
    (not (eql? #f "629"))
    (not (eql? #f #\a))
    (not (eql? #f (box '())))
    (not (eql? #f 'sym))
    (not (eql? #f id))
    (not (eql? #f #t))
    (eql? #f #f)
    #t #t
  ))

; Test collection functions

(define (empty?-test)
  (&&
    (not (empty? '(1 2 3))) ; Expected: #f
    (empty? '()) ; Expected: #t
    (not (empty? [1 2 3])) ; Expected: #t
    (empty? []) ; Expected: #t
    ; (empty? "629") ; Expected: #f ; TODO: Test string
    #t #t
  ))

(define (nth-test)
  (&&
    (eql? 2 (nth '(1 2 3 4 5) 1))
    (eql? '() (nth '() 1))
    (eql? 2 (nth [1 2 3 4 5] 1))
    #t #t
  ))

(define (foldl-test)
  (&&
    (eql? 15 (foldl + 0 '(1 2 3 4 5)))
    (eql? 0 (foldl + 0 '()))
    (eql? "adc" (foldl string "" '("a" "d" "c")))
    (eql? 15 (foldl + 0 [1 2 3 4 5]))
    (eql? 0 (foldl + 0 []))
    (eql? "adc" (foldl string "" ["a" "d" "c"]))
    #t #t
  ))

(define (map-test)
  (&&
    (eql? '(0 1 2 3 4) (map dec '(1 2 3 4 5)))
    (eql? '() (map dec '()))
    (eql? [0 1 2 3 4]  (map dec [1 2 3 4 5]))
    (eql? [] (map dec []))
    (eql? '("1" "2" "3") (map string '(1 2 3)))
    (eql? '() (map string '()))
    (eql? ["1" "2" "3"]  (map string [1 2 3]))
    (eql? [] (map string []))
    #t #t
  ))

(define (zip-test)
  (&&
    (eql? (list (list 1 2) (list 3 4)) (zip '(1 3) '(2 4)))
    (eql? (list (list 1 2) (list 3 4)) (zip '(1 3) '(2 4 5)))
    
    (eql? '() (zip '() '(1 2 3 4 5)))
    (eql? '() (zip '() '()))
    
    (eql? (vector [1 2] [3 4]) (zip [1 3] [2 4]))
    (eql? (vector [1 2] [3 4]) (zip [1 3] [2 4 5]))
    
    (eql? '() (zip '() [1 2 3 4 5]))
    (eql? '() (zip '() '()))
    
    (eql? [] (zip [] [1 2 3 4 5]))
    (eql? [] (zip [] '()))
    
    (eql? (list (list 1 2) (list 3 4)) (zip '(1 3) [2 4]))
    (eql? (list (list 1 2) (list 3 4)) (zip '(1 3) [2 4 5]))
    (eql? (vector [1 2] [3 4]) (zip [1 3] '(2 4)))
    (eql? (vector [1 2] [3 4]) (zip [1 3] '(2 4 5)))
    #t #t
  ))




)

(println! (string "(null?-test): ............... " (null?-test)))
(println! (string "(symbol?-test): ............. " (symbol?-test)))
(println! (string "(string?-test): ............. " (string?-test)))
(println! (string "(char?-test): ............... " (char?-test)))
(println! (string "(integer?-test): ............ " (integer?-test)))
(println! (string "(real?-test): ............... " (real?-test)))
(println! (string "(cons?-test): ............... " (cons?-test)))
(println! (string "(func?-test): ............... " (func?-test)))
(println! (string "(bool?-test): ............... " (bool?-test)))
(println! (string "(box?-test): ................ " (box?-test)))
(println! (string "(list?-test): ............... " (list?-test)))
(println! (string "(vector?-test): ............. " (vector?-test)))
(println! "")
(println! (string "(eql?-list-test): ........... " (eql?-list-test)))
(println! (string "(eql?-nil-test): ............ " (eql?-nil-test)))
(println! (string "(eql?-vector-test): ......... " (eql?-vector-test)))
(println! (string "(eql?-integer-test): ........ " (eql?-integer-test)))
(println! (string "(eql?-real-test): ........... " (eql?-real-test)))
(println! (string "(eql?-string-test): ......... " (eql?-string-test)))
(println! (string "(eql?-char-test): ........... " (eql?-char-test)))
(println! (string "(eql?-box-test): ............ " (eql?-box-test)))
(println! (string "(eql?-symbol-test): ......... " (eql?-symbol-test)))
(println! (string "(eql?-function-test): ....... " (eql?-function-test)))
(println! (string "(eql?-boolean-test): ........ " (eql?-boolean-test)))
(println! "")
(println! (string "(empty?-test): .............. " (empty?-test)))
(println! (string "(nth-test): ................. " (nth-test)))
(println! (string "(foldl-test): ............... " (foldl-test)))
(println! (string "(map-test): ................. " (map-test)))
(println! "")
(println! (zip [1 3] [2 4]))
(println! (zip [1 3] [2 4 5]))
(let ((a '(1 3))
      (b '(2 4)))
  (println! (zip a b)))

'lyra-core-tests-loaded

