
(when (not (defined? 'lyra-core-tests-loaded))

(define lyra-core-tests-loaded #t)

(define TODO #f)

; Type-checkers

(define (null?-test)
  (&&
    (not (null? '(1 2 3)))
    (null? '())
    (not (null? [1 2 3]))
    (not (null? []))
    (not (null? 629))
    (not (null? 62.9))
    (not (null? "629"))
    (not (null? #\a))
    (not (null? (box '())))
    (not (null? 'sym))
    (not (null? id))
    (not (null? #t))
    (not (null? #f))
  ))

(define (symbol?-test)
  (&&
    (not (symbol? '(1 2 3)))
    (not (symbol? '()))
    (not (symbol? [1 2 3]))
    (not (symbol? []))
    (not (symbol? 629))
    (not (symbol? 62.9))
    (not (symbol? "629"))
    (not (symbol? #\a))
    (not (symbol? (box '())))
    (symbol? 'sym)
    (not (symbol? id))
    (not (symbol? #t))
    (not (symbol? #f))
  ))

(define (string?-test)
  (&&
    (not (string? '(1 2 3)))
    (not (string? '()))
    (not (string? [1 2 3]))
    (not (string? []))
    (not (string? 629))
    (not (string? 62.9))
    (string? "629")
    (not (string? #\a))
    (not (string? (box '())))
    (not (string? 'sym))
    (not (string? id))
    (not (string? #t))
    (not (string? #f))
  ))

(define (char?-test)
  (&&
    (not (char? '(1 2 3)))
    (not (char? '()))
    (not (char? [1 2 3]))
    (not (char? []))
    (not (char? 629))
    (not (char? 62.9))
    (not (char? "629"))
    (char? #\a)
    (not (char? (box '())))
    (not (char? 'sym))
    (not (char? id))
    (not (char? #t))
    (not (char? #f))
  ))

(define (integer?-test)
  (&&
    (not (integer? '(1 2 3)))
    (not (integer? '()))
    (not (integer? [1 2 3]))
    (not (integer? []))
    (integer? 629)
    (not (integer? 62.9))
    (not (integer? "629"))
    (not (integer? #\a))
    (not (integer? (box '())))
    (not (integer? 'sym))
    (not (integer? id))
    (not (integer? #t))
    (not (integer? #f))
  ))

(define (real?-test)
  (&&
    (not (real? '(1 2 3)))
    (not (real? '()))
    (not (real? [1 2 3]))
    (not (real? []))
    (not (real? 629))
    (real? 62.9)
    (not (real? "629"))
    (not (real? #\a))
    (not (real? (box '())))
    (not (real? 'sym))
    (not (real? id))
    (not (real? #t))
    (not (real? #f))
  ))

(define (cons?-test)
  (&&
    (cons? '(1 2 3))
    (not (cons? '()))
    (not (cons? [1 2 3]))
    (not (cons? []))
    (not (cons? 629))
    (not (cons? 62.9))
    (not (cons? "629"))
    (not (cons? #\a))
    (not (cons? (box '())))
    (not (cons? 'sym))
    (not (cons? id))
    (not (cons? #t))
    (not (cons? #f))
  ))

(define (func?-test)
  (&&
    (not (func? '(1 2 3)))
    (not (func? '()))
    (not (func? [1 2 3]))
    (not (func? []))
    (not (func? 629))
    (not (func? 62.9))
    (not (func? "629"))
    (not (func? #\a))
    (not (func? (box '())))
    (not (func? 'sym))
    (func? id)
    (not (func? #t))
    (not (func? #f))
  ))

(define (bool?-test)
  (&&
    (not (bool? '(1 2 3)))
    (not (bool? '()))
    (not (bool? [1 2 3]))
    (not (bool? []))
    (not (bool? 629))
    (not (bool? 62.9))
    (not (bool? "629"))
    (not (bool? #\a))
    (not (bool? (box '())))
    (not (bool? 'sym))
    (not (bool? id))
    (bool? #t)
    (bool? #f)
  ))

(define (box?-test)
  (&&
    (not (box? '(1 2 3)))
    (not (box? '()))
    (not (box? [1 2 3]))
    (not (box? []))
    (not (box? 629))
    (not (box? 62.9))
    (not (box? "629"))
    (not (box? #\a))
    (box? (box '()))
    (not (box? 'sym))
    (not (box? id))
    (not (box? #t))
    (not (box? #f))
  ))

(define (list?-test)
  (&&
    (list? '(1 2 3))
    (not (list? '()))
    (not (list? [1 2 3]))
    (not (list? []))
    (not (list? 629))
    (not (list? 62.9))
    (not (list? "629"))
    (not (list? #\a))
    (not (list? (box '())))
    (not (list? 'sym))
    (not (list? id))
    (not (list? #t))
    (not (list? #f))
  ))

(define (vector?-test)
  (&&
    (not (vector? '(1 2 3)))
    (not (vector? '()))
    (vector? [1 2 3])
    (vector? [])
    (not (vector? 629))
    (not (vector? 62.9))
    (not (vector? "629"))
    (not (vector? #\a))
    (not (vector? (box '())))
    (not (vector? 'sym))
    (not (vector? id))
    (not (vector? #t))
    (not (vector? #f))
  ))

; Test eq? function
  
(define (eq?-list-test)
  (&&
    (eq? '(1 2 3) '(1 2 3))
    (not (eq? '(1 2 3) '()))
    (not (eq? '(1 2 3) [1 2 3]))
    (not (eq? '(1 2 3) []))
    (not (eq? '(1 2 3) 629))
    (not (eq? '(1 2 3) 62.9))
    (not (eq? '(1 2 3) "629"))
    (not (eq? '(1 2 3) #\a))
    (not (eq? '(1 2 3) (box '())))
    (not (eq? '(1 2 3) 'sym))
    (not (eq? '(1 2 3) id))
    (not (eq? '(1 2 3) #t))
    (not (eq? '(1 2 3) #f))
  ))

(define (eq?-nil-test)
  (&&
    (not (eq? '() '(1 2 3)))
    (eq? '() '())
    (not (eq? '() [1 2 3]))
    (not (eq? '() []))
    (not (eq? '() 629))
    (not (eq? '() 62.9))
    (not (eq? '() "629"))
    (not (eq? '() #\a))
    (not (eq? '() (box '())))
    (not (eq? '() 'sym))
    (not (eq? '() id))
    (not (eq? '() #t))
    (not (eq? '() #f))
  ))

(define (eq?-vector-test)
  (&&
    (not (eq? [1 2 3] '(1 2 3)))
    (not (eq? [1 2 3] '()))
    (eq? [1 2 3] [1 2 3])
    (not (eq? [1 2 3] []))
    (not (eq? [1 2 3] 629))
    (not (eq? [1 2 3] 62.9))
    (not (eq? [1 2 3] "629"))
    (not (eq? [1 2 3] #\a))
    (not (eq? [1 2 3] (box '())))
    (not (eq? [1 2 3] 'sym))
    (not (eq? [1 2 3] id))
    (not (eq? [1 2 3] #t))
    (not (eq? [1 2 3] #f))
    (not (eq? [] '(1 2 3)))
    (not (eq? [] '()))
    (not (eq? [] [1 2 3]))
    (eq? [] [])
    (not (eq? [] 629))
    (not (eq? [] 62.9))
    (not (eq? [] "629"))
    (not (eq? [] #\a))
    (not (eq? [] (box '())))
    (not (eq? [] 'sym))
    (not (eq? [] id))
    (not (eq? [] #t))
    (not (eq? [] #f))
  ))

(define (eq?-integer-test)
  (&&
    (not (eq? 629 '(1 2 3)))
    (not (eq? 629 '()))
    (not (eq? 629 [1 2 3]))
    (not (eq? 629 []))
    (eq? 629 629)
    (not (eq? 629 62.9))
    (not (eq? 629 "629"))
    (not (eq? 629 #\a))
    (not (eq? 629 (box '())))
    (not (eq? 629 'sym))
    (not (eq? 629 id))
    (not (eq? 629 #t))
    (not (eq? 629 #f))
  ))

(define (eq?-real-test)
  (&&
    (not (eq? 62.9 '(1 2 3)))
    (not (eq? 62.9 '()))
    (not (eq? 62.9 [1 2 3]))
    (not (eq? 62.9 []))
    (not (eq? 62.9 629))
    (eq? 62.9 62.9)
    (not (eq? 62.9 "629"))
    (not (eq? 62.9 #\a))
    (not (eq? 62.9 (box '())))
    (not (eq? 62.9 'sym))
    (not (eq? 62.9 id))
    (not (eq? 62.9 #t))
    (not (eq? 62.9 #f))
  ))

(define (eq?-string-test)
  (&&
    (not (eq? "629" '(1 2 3)))
    (not (eq? "629" '()))
    (not (eq? "629" [1 2 3]))
    (not (eq? "629" []))
    (not (eq? "629" 629))
    (not (eq? "629" 62.9))
    (eq? "629" "629")
    (not (eq? "629" #\a))
    (not (eq? "629" (box '())))
    (not (eq? "629" 'sym))
    (not (eq? "629" id))
    (not (eq? "629" #t))
    (not (eq? "629" #f))
  ))

(define (eq?-char-test)
  (&&
    (not (eq? #\a '(1 2 3)))
    (not (eq? #\a '()))
    (not (eq? #\a [1 2 3]))
    (not (eq? #\a []))
    (not (eq? #\a 629))
    (not (eq? #\a 62.9))
    (not (eq? #\a "629"))
    (eq? #\a #\a)
    (not (eq? #\a (box '())))
    (not (eq? #\a 'sym))
    (not (eq? #\a id))
    (not (eq? #\a #t))
    (not (eq? #\a #f))
  ))

(define (eq?-box-test)
  (&&
    (not (eq? (box '()) '(1 2 3)))
    (not (eq? (box '()) '()))
    (not (eq? (box '()) [1 2 3]))
    (not (eq? (box '()) []))
    (not (eq? (box '()) 629))
    (not (eq? (box '()) 62.9))
    (not (eq? (box '()) "629"))
    (not (eq? (box '()) #\a))
    (not (eq? (box '()) (box '()))) ; Comparison with boxes is always #f
    (not (eq? (box '()) 'sym))
    (not (eq? (box '()) id))
    (not (eq? (box '()) #t))
    (not (eq? (box '()) #f))
  ))

(define (eq?-symbol-test)
  (&&
    (not (eq? 'sym '(1 2 3)))
    (not (eq? 'sym '()))
    (not (eq? 'sym [1 2 3]))
    (not (eq? 'sym []))
    (not (eq? 'sym 629))
    (not (eq? 'sym 62.9))
    (not (eq? 'sym "629"))
    (not (eq? 'sym #\a))
    (not (eq? 'sym (box '())))
    (eq? 'sym 'sym)
    (not (eq? 'sym id))
    (not (eq? 'sym #t))
    (not (eq? 'sym #f))
  ))

(define (eq?-function-test)
  (&&
    (not (eq? id '(1 2 3)))
    (not (eq? id '()))
    (not (eq? id [1 2 3]))
    (not (eq? id []))
    (not (eq? id 629))
    (not (eq? id 62.9))
    (not (eq? id "629"))
    (not (eq? id #\a))
    (not (eq? id (box '())))
    (not (eq? id 'sym))
    (eq? id id)
    (not (eq? id #t))
    (not (eq? id #f))
  ))

(define (eq?-boolean-test)
  (&&
    (not (eq? #t '(1 2 3)))
    (not (eq? #t '()))
    (not (eq? #t [1 2 3]))
    (not (eq? #t []))
    (not (eq? #t 629))
    (not (eq? #t 62.9))
    (not (eq? #t "629"))
    (not (eq? #t #\a))
    (not (eq? #t (box '())))
    (not (eq? #t 'sym))
    (not (eq? #t id))
    (eq? #t #t)
    (not (eq? #t #f))
    (not (eq? #f '(1 2 3)))
    (not (eq? #f '()))
    (not (eq? #f [1 2 3]))
    (not (eq? #f []))
    (not (eq? #f 629))
    (not (eq? #f 62.9))
    (not (eq? #f "629"))
    (not (eq? #f #\a))
    (not (eq? #f (box '())))
    (not (eq? #f 'sym))
    (not (eq? #f id))
    (not (eq? #f #t))
    (eq? #f #f)
  ))

; Test collection functions

(define (first-list-test)
  (&&
    (eq? '() (first '()))
    (eq? 1 (first (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '() (first (list '() '() '())))
    (eq? [] (first (list [] [] [])))
    (eq? "a" (first (list "a" "b" "c")))
    (eq? 1.0 (first (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (eq? + (first (list + - * / % id)))
    (eq? 'x (first (list 'x 'y 'z 'abc 'def)))
    (eq? #\x (first (list #\x #\y #\z #\space #\newline)))
    (eq? '(1 2 3) (first (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? [1 2 3] (first (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (first-vector-test)
  (&&
    (eq? '() (first []))
    (eq? 1 (first [1 2 3 4 5 6 7 8 9 10]))
    (eq? '() (first ['() '() '()]))
    (eq? [] (first [[] [] []]))
    (eq? "a" (first ["a" "b" "c"]))
    (eq? 1.0 (first [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
    (eq? + (first [+ - * / % id]))
    (eq? 'x (first ['x 'y 'z 'abc 'def]))
    (eq? #\x (first [#\x #\y #\z #\space #\newline]))
    (eq? '(1 2 3) (first ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [1 2 3] (first [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (second-list-test)
  (&&
    (eq? '() (second '()))
    (eq? 2 (second (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '() (second (list '() '() '())))
    (eq? [] (second (list [] [] [])))
    (eq? "b" (second (list "a" "b" "c")))
    (eq? 2.0 (second (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (eq? - (second (list + - * / % id)))
    (eq? 'y (second (list 'x 'y 'z 'abc 'def)))
    (eq? #\y (second (list #\x #\y #\z #\space #\newline)))
    (eq? '(2 3 4) (second (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? [2 3 4] (second (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (second-vector-test)
  (&&
    (eq? '() (second []))
    (eq? 2 (second [1 2 3 4 5 6 7 8 9 10]))
    (eq? '() (second ['() '() '()]))
    (eq? [] (second [[] [] []]))
    (eq? "b" (second ["a" "b" "c"]))
    (eq? 2.0 (second [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
    (eq? - (second [+ - * / % id]))
    (eq? 'y (second ['x 'y 'z 'abc 'def]))
    (eq? #\y (second [#\x #\y #\z #\space #\newline]))
    (eq? '(2 3 4) (second ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [2 3 4] (second [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (third-list-test)
  (&&
    (eq? '() (third '()))
    (eq? 3 (third (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '() (third (list '() '() '())))
    (eq? [] (third (list [] [] [])))
    (eq? "c" (third (list "a" "b" "c")))
    (eq? 3.0 (third (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (eq? * (third (list + - * / % id)))
    (eq? 'z (third (list 'x 'y 'z 'abc 'def)))
    (eq? #\z (third (list #\x #\y #\z #\space #\newline)))
    (eq? '(3 4 5) (third (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? [3 4 5] (third (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (third-vector-test)
  (&&
    (eq? '() (third []))
    (eq? 3 (third [1 2 3 4 5 6 7 8 9 10]))
    (eq? '() (third ['() '() '()]))
    (eq? [] (third [[] [] []]))
    (eq? "c" (third ["a" "b" "c"]))
    (eq? 3.0 (third [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
    (eq? * (third [+ - * / % id]))
    (eq? 'z (third ['x 'y 'z 'abc 'def]))
    (eq? #\z (third [#\x #\y #\z #\space #\newline]))
    (eq? '(3 4 5) (third ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [3 4 5] (third [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (rest-list-test)
  (&&
    (eq? '() (rest '()))
    (eq? (list 2 3 4 5 6 7 8 9 10) (rest (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list '() '()) (rest (list '() '() '())))
    (eq? (list [] []) (rest (list [] [] [])))
    (eq? (list "b" "c") (rest (list "a" "b" "c")))
    (eq? (list 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0) (rest (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (eq? (list - * / % id) (rest (list + - * / % id)))
    (eq? (list 'y 'z 'abc 'def) (rest (list 'x 'y 'z 'abc 'def)))
    (eq? (list #\y #\z #\space #\newline) (rest (list #\x #\y #\z #\space #\newline)))
    (eq? (list '(2 3 4) '(3 4 5)) (rest (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list [2 3 4] [3 4 5]) (rest (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (rest-vector-test)
  (&&
    (eq? [] (rest []))
    (eq? [2 3 4 5 6 7 8 9 10] (rest [1 2 3 4 5 6 7 8 9 10]))
    (eq? ['() '()] (rest ['() '() '()]))
    (eq? [[] []] (rest [[] [] []]))
    (eq? ["b" "c"] (rest ["a" "b" "c"]))
    (eq? [2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0] (rest [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
    (eq? [- * / % id] (rest [+ - * / % id]))
    (eq? ['y 'z 'abc 'def] (rest ['x 'y 'z 'abc 'def]))
    (eq? [#\y #\z #\space #\newline] (rest [#\x #\y #\z #\space #\newline]))
    (eq? ['(2 3 4) '(3 4 5)] (rest ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [[2 3 4] [3 4 5]] (rest [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (nth-list-test)
  (&&
    (eq? '() (nth '() 0))
    (eq? 1 (nth (list 1 2 3 4 5 6 7 8 9 10) 0))
    (eq? '() (nth (list '() '() '()) 0))
    (eq? [] (nth (list [] [] []) 0))
    (eq? "a" (nth (list "a" "b" "c") 0))
    (eq? 1.0 (nth (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0) 0))
    (eq? + (nth (list + - * / % id) 0))
    (eq? 'x (nth (list 'x 'y 'z 'abc 'def) 0))
    (eq? #\x (nth (list #\x #\y #\z #\space #\newline) 0))
    (eq? '(1 2 3) (nth (list '(1 2 3) '(2 3 4) '(3 4 5)) 0))
    (eq? [1 2 3] (nth (list [1 2 3] [2 3 4] [3 4 5]) 0))
    
    (eq? '() (nth '() 1))
    (eq? 2 (nth (list 1 2 3 4 5 6 7 8 9 10) 1))
    (eq? '() (nth (list '() '() '()) 1))
    (eq? [] (nth (list [] [] []) 1))
    (eq? "b" (nth (list "a" "b" "c") 1))
    (eq? 2.0 (nth (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0) 1))
    (eq? - (nth (list + - * / % id) 1))
    (eq? 'y (nth (list 'x 'y 'z 'abc 'def) 1))
    (eq? #\y (nth (list #\x #\y #\z #\space #\newline) 1))
    (eq? '(2 3 4) (nth (list '(1 2 3) '(2 3 4) '(3 4 5)) 1))
    (eq? [2 3 4] (nth (list [1 2 3] [2 3 4] [3 4 5]) 1))
    
    (eq? '() (nth '() 2))
    (eq? 3 (nth (list 1 2 3 4 5 6 7 8 9 10) 2))
    (eq? '() (nth (list '() '() '()) 2))
    (eq? [] (nth (list [] [] []) 2))
    (eq? "c" (nth (list "a" "b" "c") 2))
    (eq? 3.0 (nth (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0) 2))
    (eq? * (nth (list + - * / % id) 2))
    (eq? 'z (nth (list 'x 'y 'z 'abc 'def) 2))
    (eq? #\z (nth (list #\x #\y #\z #\space #\newline) 2))
    (eq? '(3 4 5) (nth (list '(1 2 3) '(2 3 4) '(3 4 5)) 2))
    (eq? [3 4 5] (nth (list [1 2 3] [2 3 4] [3 4 5]) 2))
  ))

(define (nth-vector-test)
  (&&
    (eq? '() (nth [] 0))
    (eq? 1 (nth [1 2 3 4 5 6 7 8 9 10] 0))
    (eq? '() (nth ['() '() '()] 0))
    (eq? [] (nth [[] [] []] 0))
    (eq? "a" (nth ["a" "b" "c"] 0))
    (eq? 1.0 (nth [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0] 0))
    (eq? + (nth [+ - * / % id] 0))
    (eq? 'x (nth ['x 'y 'z 'abc 'def] 0))
    (eq? #\x (nth [#\x #\y #\z #\space #\newline] 0))
    (eq? '(1 2 3) (nth ['(1 2 3) '(2 3 4) '(3 4 5)] 0))
    (eq? [1 2 3] (nth [[1 2 3] [2 3 4] [3 4 5]] 0))
    
    (eq? '() (nth [] 1))
    (eq? 2 (nth [1 2 3 4 5 6 7 8 9 10] 1))
    (eq? '() (nth ['() '() '()] 1))
    (eq? [] (nth [[] [] []] 1))
    (eq? "b" (nth ["a" "b" "c"] 1))
    (eq? 2.0 (nth [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0] 1))
    (eq? - (nth [+ - * / % id] 1))
    (eq? 'y (nth ['x 'y 'z 'abc 'def] 1))
    (eq? #\y (nth [#\x #\y #\z #\space #\newline] 1))
    (eq? '(2 3 4) (nth ['(1 2 3) '(2 3 4) '(3 4 5)] 1))
    (eq? [2 3 4] (nth [[1 2 3] [2 3 4] [3 4 5]] 1))
    
    (eq? '() (nth [] 2))
    (eq? 3 (nth [1 2 3 4 5 6 7 8 9 10] 2))
    (eq? '() (nth ['() '() '()] 2))
    (eq? [] (nth [[] [] []] 2))
    (eq? "c" (nth ["a" "b" "c"] 2))
    (eq? 3.0 (nth [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0] 2))
    (eq? * (nth [+ - * / % id] 2))
    (eq? 'z (nth ['x 'y 'z 'abc 'def] 2))
    (eq? #\z (nth [#\x #\y #\z #\space #\newline] 2))
    (eq? '(3 4 5) (nth ['(1 2 3) '(2 3 4) '(3 4 5)] 2))
    (eq? [3 4 5] (nth [[1 2 3] [2 3 4] [3 4 5]] 2))
  ))

(define (empty?-list-test)
  (&&
    (empty? '())
    (not (empty? '(1 2 3 4 5 6 7 8 9 10)))
    (not (empty? '('() '() '())))
    (not (empty? '([] [] [])))
    (not (empty? '("a" "b" "c")))
    (not (empty? '(1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (not (empty? '(+ - * / % id)))
    (not (empty? '('x 'y 'z 'abc 'def)))
    (not (empty? '(#\x #\y #\z #\space #\newline)))
    (not (empty? '('(1 2 3) '(2 3 4) '(3 4 5))))
    (not (empty? '([1 2 3] [2 3 4] [3 4 5])))
  ))

(define (empty?-vector-test)
  (&&
    (empty? [])
    (not (empty? [1 2 3 4 5 6 7 8 9 10]))
    (not (empty? ['() '() '()]))
    (not (empty? [[] [] []]))
    (not (empty? ["a" "b" "c"]))
    (not (empty? [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
    (not (empty? [+ - * / % id]))
    (not (empty? ['x 'y 'z 'abc 'def]))
    (not (empty? [#\x #\y #\z #\space #\newline]))
    (not (empty? ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (not (empty? [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (foldl-list-test)
  (let* (helper (lambda (xs) (foldl (lambda (x y) (cons y x)) '() xs)))
  (&&
    (eq? 0 (foldl + 0 '()))
    (eq? 1 (foldl + 1 '()))
    (eq? 6 (foldl + 5 (list 1)))
    (eq? 15 (foldl + 0 (list 1 2 3 4 5)))
    (eq? "12345" (foldl string "" (list 1 2 3 4 5)))
    
    (eq? '() (helper (list)))
    (eq? (list 10 9 8 7 6 5 4 3 2 1) (helper (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list '() '() '()) (helper (list '() '() '())))
    (eq? (list [] [] []) (helper (list [] [] [])))
    (eq? (list "c" "b" "a") (helper (list "a" "b" "c")))
    (eq? (list 10.0 9.0 8.0 7.0 6.0 5.0 4.0 3.0 2.0 1.0) (helper (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (eq? (list id % / * - +) (helper (list + - * / % id)))
    (eq? (list 'def 'abc 'z 'y 'x) (helper (list 'x 'y 'z 'abc 'def)))
    (eq? (list #\newline #\space #\z #\y #\x) (helper (list #\x #\y #\z #\space #\newline)))
    (eq? (list '(3 4 5) '(2 3 4) '(1 2 3)) (helper (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list [3 4 5] [2 3 4] [1 2 3]) (helper (list [1 2 3] [2 3 4] [3 4 5])))
  )))

(define (foldl-vector-test)
  (let* (helper (lambda (xs) (foldl (lambda (x y) (cons y x)) '() xs)))
    (&&
      (eq? 0 (foldl + 0 []))
      (eq? 1 (foldl + 1 []))
      (eq? 6 (foldl + 5 [1]))
      (eq? 15 (foldl + 0 [1 2 3 4 5]))
      (eq? "12345" (foldl string "" [1 2 3 4 5]))
        
      (eq? '() (helper []))
      (eq? (list 10 9 8 7 6 5 4 3 2 1) (helper [1 2 3 4 5 6 7 8 9 10]))
      (eq? (list '() '() '()) (helper ['() '() '()]))
      (eq? (list [] [] []) (helper [[] [] []]))
      (eq? (list "c" "b" "a") (helper ["a" "b" "c"]))
      (eq? (list 10.0 9.0 8.0 7.0 6.0 5.0 4.0 3.0 2.0 1.0) (helper [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
      (eq? (list id % / * - +) (helper [+ - * / % id]))
      (eq? (list 'def 'abc 'z 'y 'x) (helper ['x 'y 'z 'abc 'def]))
      (eq? (list #\newline #\space #\z #\y #\x) (helper [#\x #\y #\z #\space #\newline]))
      (eq? (list '(3 4 5) '(2 3 4) '(1 2 3)) (helper ['(1 2 3) '(2 3 4) '(3 4 5)]))
      (eq? (list [3 4 5] [2 3 4] [1 2 3]) (helper [[1 2 3] [2 3 4] [3 4 5]]))
    )))

(define (map-list-test)
  (&&
    (eq? '(1 4 9 16 25 36 49 64 81 100) (map (lambda (n) (* n n)) '(1 2 3 4 5 6 7 8 9 10)))
    (eq? '() (map string '()))
    (eq? (list "1" "2" "3" "4" "5" "6" "7" "8" "9" "10") (map string (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list "()" "()" "()") (map string (list '() '() '())))
    (eq? (list "[]" "[]" "[]") (map string (list [] [] [])))
    (eq? (list "a" "b" "c") (map string (list "a" "b" "c")))
    (eq? (list "1.1" "2.2" "3.3" "4.4" "5.5" "6.6" "7.7" "8.8" "9.9" "10.1") (map string (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? (list "x" "y" "z" "abc" "def") (map string (list 'x 'y 'z 'abc 'def)))
    (eq? (list "x" "y" "z" " " "\n") (map string (list #\x #\y #\z #\space #\newline)))
    (eq? (list "(1 2 3)" "(2 3 4)" "(3 4 5)") (map string (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list "[1 2 3]" "[2 3 4]" "[3 4 5]") (map string (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (map-vector-test)
  (&&
    (eq? [1 4 9 16 25 36 49 64 81 100] (map (lambda (n) (* n n)) [1 2 3 4 5 6 7 8 9 10]))
    (eq? [] (map string []))
    (eq? ["1" "2" "3" "4" "5" "6" "7" "8" "9" "10"] (map string [1 2 3 4 5 6 7 8 9 10]))
    (eq? ["()" "()" "()"] (map string ['() '() '()]))
    (eq? ["[]" "[]" "[]"] (map string [[] [] []]))
    (eq? ["a" "b" "c"] (map string ["a" "b" "c"]))
    (eq? ["1.1" "2.2" "3.3" "4.4" "5.5" "6.6" "7.7" "8.8" "9.9" "10.1"] (map string [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1]))
    (eq? ["x" "y" "z" "abc" "def"] (map string ['x 'y 'z 'abc 'def]))
    (eq? ["x" "y" "z" " " "\n"] (map string [#\x #\y #\z #\space #\newline]))
    (eq? ["(1 2 3)" "(2 3 4)" "(3 4 5)"] (map string ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? ["[1 2 3]" "[2 3 4]" "[3 4 5]"] (map string [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (filter-list-test)
  (let* (v (list 1 2 3 4 5 6 7 8 9 10 '() '() '() [] [] [] "a" "b" "c" 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1 + - * / % id 'x 'y 'z 'abc 'def #\x #\y #\z #\space #\newline '(1 2 3) '(2 3 4) '(3 4 5) [1 2 3] [2 3 4] [3 4 5]))
    (&&
      (eq? (list 'x 'y 'z 'abc 'def) (filter symbol? v))
      (eq? (list [] [] [] [1 2 3] [2 3 4] [3 4 5]) (filter vector? v))
      (eq? (list '(1 2 3) '(2 3 4) '(3 4 5)) (filter list? v))
      (eq? (list 1 2 3 4 5 6 7 8 9 10) (filter integer? v))
      (eq? (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) (filter real? v))
      (eq? (list + - * / % id) (filter func? v))
      (eq? (list 1 2 3 4 5 6 7 8 9 10 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
           (filter number? v))
      (eq? (list #\x #\y #\z #\space #\newline) (filter char? v))
      (eq? (list "a" "b" "c") (filter string? v))
    )))

(define (filter-vector-test)
  (let* (v [1 2 3 4 5 6 7 8 9 10 '() '() '() [] [] [] "a" "b" "c" 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1 + - * / % id 'x 'y 'z 'abc 'def #\x #\y #\z #\space #\newline '(1 2 3) '(2 3 4) '(3 4 5) [1 2 3] [2 3 4] [3 4 5]])
    (&&
      (eq? (vector 'x 'y 'z 'abc 'def) (filter symbol? v))
      (eq? (vector [] [] [] [1 2 3] [2 3 4] [3 4 5]) (filter vector? v))
      (eq? (vector '(1 2 3) '(2 3 4) '(3 4 5)) (filter list? v))
      (eq? (vector 1 2 3 4 5 6 7 8 9 10) (filter integer? v))
      (eq? (vector 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) (filter real? v))
      (eq? (vector + - * / % id) (filter func? v))
      (eq? (vector 1 2 3 4 5 6 7 8 9 10 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
           (filter number? v))
      (eq? (vector #\x #\y #\z #\space #\newline) (filter char? v))
      (eq? (vector "a" "b" "c") (filter string? v))
  )))

(define (append-list-nil-test)
  (&&
    (eq? (list 1 2 3 4 5 6 7 8 9 10) (append '() (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 1 2 3 4 5 6 7 8 9 10) (append (list 1 2 3 4 5 6 7 8 9 10) '()))
    (eq? (list '() '() '()) (append '() (list '() '() '())))
    (eq? (list '() '() '()) (append (list '() '() '()) '()))
    (eq? (list [] [] []) (append '() (list [] [] [])))
    (eq? (list [] [] []) (append (list [] [] []) '()))
    (eq? (list "a" "b" "c") (append '() (list "a" "b" "c")))
    (eq? (list "a" "b" "c") (append (list "a" "b" "c") '()))
    (eq? (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
         (append '() (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
         (append (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) '()))
    (eq? (list + - * / % id) (append '() (list + - * / % id)))
    (eq? (list + - * / % id) (append (list + - * / % id) '()))
    (eq? (list 'x 'y 'z 'abc 'def) (append '() (list 'x 'y 'z 'abc 'def)))
    (eq? (list 'x 'y 'z 'abc 'def) (append (list 'x 'y 'z 'abc 'def) '()))
    (eq? (list #\x #\y #\z #\space #\newline)
         (append '() (list #\x #\y #\z #\space #\newline)))
    (eq? (list #\x #\y #\z #\space #\newline)
         (append (list #\x #\y #\z #\space #\newline) '()))
    (eq? (list '(1 2 3) '(2 3 4) '(3 4 5))
         (append '() (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list '(1 2 3) '(2 3 4) '(3 4 5))
         (append (list '(1 2 3) '(2 3 4) '(3 4 5)) '()))
    (eq? (list [1 2 3] [2 3 4] [3 4 5])
         (append '() (list [1 2 3] [2 3 4] [3 4 5])))
    (eq? (list [1 2 3] [2 3 4] [3 4 5])
         (append (list [1 2 3] [2 3 4] [3 4 5]) '()))
  ))

(define (append-list-test)
  (&&
    (eq? (list 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10)
        (append (list 1 2 3 4 5 6 7 8 9 10) (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list '() '() '() '() '() '())
        (append (list '() '() '()) (list '() '() '())))
    (eq? (list [] [] [] [] [] [])
        (append (list [] [] []) (list [] [] [])))
    (eq? (list "a" "b" "c" "a" "b" "c")
        (append (list "a" "b" "c") (list "a" "b" "c")))
    (eq? (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
        (append (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? (list + - * / % id + - * / % id)
        (append (list + - * / % id) (list + - * / % id)))
    (eq? (list 'x 'y 'z 'abc 'def 'x 'y 'z 'abc 'def)
        (append (list 'x 'y 'z 'abc 'def) (list 'x 'y 'z 'abc 'def)))
    (eq? (list #\x #\y #\z #\space #\newline #\x #\y #\z #\space #\newline)
        (append (list #\x #\y #\z #\space #\newline) (list #\x #\y #\z #\space #\newline)))
    (eq? (list '(1 2 3) '(2 3 4) '(3 4 5) '(1 2 3) '(2 3 4) '(3 4 5))
        (append (list '(1 2 3) '(2 3 4) '(3 4 5)) (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list [1 2 3] [2 3 4] [3 4 5] [1 2 3] [2 3 4] [3 4 5])
        (append (list [1 2 3] [2 3 4] [3 4 5]) (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (append-vector-empty-test)
  (&&
    (eq? (vector 1 2 3 4 5 6 7 8 9 10) (append [] (vector 1 2 3 4 5 6 7 8 9 10)))
    (eq? (vector 1 2 3 4 5 6 7 8 9 10) (append (vector 1 2 3 4 5 6 7 8 9 10) []))
    (eq? (vector '() '() '()) (append [] (vector '() '() '())))
    (eq? (vector '() '() '()) (append (vector '() '() '()) []))
    (eq? (vector [] [] []) (append [] (vector [] [] [])))
    (eq? (vector [] [] []) (append (vector [] [] []) []))
    (eq? (vector "a" "b" "c") (append [] (vector "a" "b" "c")))
    (eq? (vector "a" "b" "c") (append (vector "a" "b" "c") []))
    (eq? (vector 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
         (append [] (vector 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? (vector 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
         (append (vector 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) []))
    (eq? (vector + - * / % id) (append [] (vector + - * / % id)))
    (eq? (vector + - * / % id) (append (vector + - * / % id) []))
    (eq? (vector 'x 'y 'z 'abc 'def) (append [] (vector 'x 'y 'z 'abc 'def)))
    (eq? (vector 'x 'y 'z 'abc 'def) (append (vector 'x 'y 'z 'abc 'def) []))
    (eq? (vector #\x #\y #\z #\space #\newline)
         (append [] (vector #\x #\y #\z #\space #\newline)))
    (eq? (vector #\x #\y #\z #\space #\newline)
         (append (vector #\x #\y #\z #\space #\newline) []))
    (eq? (vector '(1 2 3) '(2 3 4) '(3 4 5))
         (append [] (vector '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (vector '(1 2 3) '(2 3 4) '(3 4 5))
         (append (vector '(1 2 3) '(2 3 4) '(3 4 5)) []))
    (eq? (vector [1 2 3] [2 3 4] [3 4 5])
         (append [] (vector [1 2 3] [2 3 4] [3 4 5])))
    (eq? (vector [1 2 3] [2 3 4] [3 4 5])
         (append (vector [1 2 3] [2 3 4] [3 4 5]) []))
  ))

(define (append-vector-test)
  (&&
    (eq? (vector 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10)
        (append (vector 1 2 3 4 5 6 7 8 9 10) (vector 1 2 3 4 5 6 7 8 9 10)))
    (eq? (vector '() '() '() '() '() '())
        (append (vector '() '() '()) (vector '() '() '())))
    (eq? (vector [] [] [] [] [] [])
        (append (vector [] [] []) (vector [] [] [])))
    (eq? (vector "a" "b" "c" "a" "b" "c")
        (append (vector "a" "b" "c") (vector "a" "b" "c")))
    (eq? (vector 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)
        (append (vector 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) (vector 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? (vector + - * / % id + - * / % id)
        (append (vector + - * / % id) (vector + - * / % id)))
    (eq? (vector 'x 'y 'z 'abc 'def 'x 'y 'z 'abc 'def)
        (append (vector 'x 'y 'z 'abc 'def) (vector 'x 'y 'z 'abc 'def)))
    (eq? (vector #\x #\y #\z #\space #\newline #\x #\y #\z #\space #\newline)
        (append (vector #\x #\y #\z #\space #\newline) (vector #\x #\y #\z #\space #\newline)))
    (eq? (vector '(1 2 3) '(2 3 4) '(3 4 5) '(1 2 3) '(2 3 4) '(3 4 5))
        (append (vector '(1 2 3) '(2 3 4) '(3 4 5)) (vector '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (vector [1 2 3] [2 3 4] [3 4 5] [1 2 3] [2 3 4] [3 4 5])
        (append (vector [1 2 3] [2 3 4] [3 4 5]) (vector [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (find-first-list-test)
  (let* (v (list 1 2 3 4 5 6 7 8 9 10 '() '() '() [] [] [] "a" "b" "c" 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1 + - * / % id 'x 'y 'z 'abc 'def #\x #\y #\z #\space #\newline '(1 2 3) '(2 3 4) '(3 4 5) [1 2 3] [2 3 4] [3 4 5]))
    (&&
      (eq? 'x (find-first symbol? v))
      (eq? [] (find-first vector? v))
      (eq? '(1 2 3) (find-first list? v))
      (eq? 1 (find-first integer? v))
      (eq? 1.1(find-first real? v))
      (eq? + (find-first func? v))
      (eq? 1 (find-first number? v))
      (eq? #\x (find-first char? v))
      (eq? "a" (find-first string? v))
    )))

(define (find-first-vector-test)
  (let* (v [1 2 3 4 5 6 7 8 9 10 '() '() '() [] [] [] "a" "b" "c" 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1 + - * / % id 'x 'y 'z 'abc 'def #\x #\y #\z #\space #\newline '(1 2 3) '(2 3 4) '(3 4 5) [1 2 3] [2 3 4] [3 4 5]])
    (&&
      (eq? 'x (find-first symbol? v))
      (eq? [] (find-first vector? v))
      (eq? '(1 2 3) (find-first list? v))
      (eq? 1 (find-first integer? v))
      (eq? 1.1(find-first real? v))
      (eq? + (find-first func? v))
      (eq? 1 (find-first number? v))
      (eq? #\x (find-first char? v))
      (eq? "a" (find-first string? v))
    )))

 
(define (->vector-list-test)
  (&&
    (eq? [] (->vector '()))
    (eq? [1 2 3 4 5 6 7 8 9 10] (->vector (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? ['() '() '()] (->vector (list '() '() '())))
    (eq? [[] [] []] (->vector (list [] [] [])))
    (eq? ["a" "b" "c"] (->vector (list "a" "b" "c")))
    (eq? [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1] (->vector (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? [+ - * / % id] (->vector (list + - * / % id)))
    (eq? ['x 'y 'z 'abc 'def] (->vector (list 'x 'y 'z 'abc 'def)))
    (eq? [#\x #\y #\z #\space #\newline] (->vector (list #\x #\y #\z #\space #\newline)))
    (eq? ['(1 2 3) '(2 3 4) '(3 4 5)] (->vector (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? [[1 2 3] [2 3 4] [3 4 5]] (->vector (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (->vector-vector-test)
  (&&
    (eq? [] (->vector []))
    (eq? [1 2 3 4 5 6 7 8 9 10] (->vector [1 2 3 4 5 6 7 8 9 10]))
    (eq? ['() '() '()] (->vector ['() '() '()]))
    (eq? [[] [] []] (->vector [[] [] []]))
    (eq? ["a" "b" "c"] (->vector ["a" "b" "c"]))
    (eq? [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1] (->vector [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1]))
    (eq? [+ - * / % id] (->vector [+ - * / % id]))
    (eq? ['x 'y 'z 'abc 'def] (->vector ['x 'y 'z 'abc 'def]))
    (eq? [#\x #\y #\z #\space #\newline] (->vector [#\x #\y #\z #\space #\newline]))
    (eq? ['(1 2 3) '(2 3 4) '(3 4 5)] (->vector ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [[1 2 3] [2 3 4] [3 4 5]] (->vector [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (->list-list-test)
  (&&
    (eq? '() (->list '()))
    (eq? (list 1 2 3 4 5 6 7 8 9 10) (->list (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list '() '() '()) (->list (list '() '() '())))
    (eq? (list [] [] []) (->list (list [] [] [])))
    (eq? (list "a" "b" "c") (->list (list "a" "b" "c")))
    (eq? (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) (->list (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? (list + - * / % id) (->list (list + - * / % id)))
    (eq? (list 'x 'y 'z 'abc 'def) (->list (list 'x 'y 'z 'abc 'def)))
    (eq? (list #\x #\y #\z #\space #\newline) (->list (list #\x #\y #\z #\space #\newline)))
    (eq? (list '(1 2 3) '(2 3 4) '(3 4 5)) (->list (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list [1 2 3] [2 3 4] [3 4 5]) (->list (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (->list-vector-test)
  (&&
    (eq? '() (->list []))
    (eq? (list 1 2 3 4 5 6 7 8 9 10) (->list [1 2 3 4 5 6 7 8 9 10]))
    (eq? (list '() '() '()) (->list ['() '() '()]))
    (eq? (list [] [] []) (->list [[] [] []]))
    (eq? (list "a" "b" "c") (->list ["a" "b" "c"]))
    (eq? (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) (->list [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1]))
    (eq? (list + - * / % id) (->list [+ - * / % id]))
    (eq? (list 'x 'y 'z 'abc 'def) (->list ['x 'y 'z 'abc 'def]))
    (eq? (list #\x #\y #\z #\space #\newline) (->list [#\x #\y #\z #\space #\newline]))
    (eq? (list '(1 2 3) '(2 3 4) '(3 4 5)) (->list ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? (list [1 2 3] [2 3 4] [3 4 5]) (->list [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (copy-list-test)
  (&&
    (eq? '() (copy '()))
    (eq? (list 1 2 3 4 5 6 7 8 9 10) (copy (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list '() '() '()) (copy (list '() '() '())))
    (eq? (list [] [] []) (copy (list [] [] [])))
    (eq? (list "a" "b" "c") (copy (list "a" "b" "c")))
    (eq? (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) (copy (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? (list + - * / % id) (copy (list + - * / % id)))
    (eq? (list 'x 'y 'z 'abc 'def) (copy (list 'x 'y 'z 'abc 'def)))
    (eq? (list #\x #\y #\z #\space #\newline) (copy (list #\x #\y #\z #\space #\newline)))
    (eq? (list '(1 2 3) '(2 3 4) '(3 4 5)) (copy (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list [1 2 3] [2 3 4] [3 4 5]) (copy (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (copy-vector-test)
  (&&
    (eq? [] (copy []))
    (eq? [1 2 3 4 5 6 7 8 9 10] (copy [1 2 3 4 5 6 7 8 9 10]))
    (eq? ['() '() '()] (copy ['() '() '()]))
    (eq? [[] [] []] (copy [[] [] []]))
    (eq? ["a" "b" "c"] (copy ["a" "b" "c"]))
    (eq? [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1] (copy [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1]))
    (eq? [+ - * / % id] (copy [+ - * / % id]))
    (eq? ['x 'y 'z 'abc 'def] (copy ['x 'y 'z 'abc 'def]))
    (eq? [#\x #\y #\z #\space #\newline] (copy [#\x #\y #\z #\space #\newline]))
    (eq? ['(1 2 3) '(2 3 4) '(3 4 5)] (copy ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [[1 2 3] [2 3 4] [3 4 5]] (copy [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (but-last-list-test)
  (&&
    (eq? '() (but-last '()))
    (eq? (list 1 2 3 4 5 6 7 8 9) (but-last (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list '() '()) (but-last (list '() '() '())))
    (eq? (list [] []) (but-last (list [] [] [])))
    (eq? (list "a" "b") (but-last (list "a" "b" "c")))
    (eq? (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9) (but-last (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? (list + - * / %) (but-last (list + - * / % id)))
    (eq? (list 'x 'y 'z 'abc) (but-last (list 'x 'y 'z 'abc 'def)))
    (eq? (list #\x #\y #\z #\space) (but-last (list #\x #\y #\z #\space #\newline)))
    (eq? (list '(1 2 3) '(2 3 4)) (but-last (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list [1 2 3] [2 3 4]) (but-last (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (but-last-vector-test)
  (&&
    (eq? [] (but-last []))
    (eq? [1 2 3 4 5 6 7 8 9] (but-last [1 2 3 4 5 6 7 8 9 10]))
    (eq? ['() '()] (but-last ['() '() '()]))
    (eq? [[] []] (but-last [[] [] []]))
    (eq? ["a" "b"] (but-last ["a" "b" "c"]))
    (eq? [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9] (but-last [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1]))
    (eq? [+ - * / %] (but-last [+ - * / % id]))
    (eq? ['x 'y 'z 'abc] (but-last ['x 'y 'z 'abc 'def]))
    (eq? [#\x #\y #\z #\space] (but-last [#\x #\y #\z #\space #\newline]))
    (eq? ['(1 2 3) '(2 3 4)] (but-last ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [[1 2 3] [2 3 4]] (but-last [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (reverse-list-test)
  (&&
    (eq? '() (reverse (list)))
    (eq? (list 10 9 8 7 6 5 4 3 2 1) (reverse (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list '() '() '()) (reverse (list '() '() '())))
    (eq? (list [] [] []) (reverse (list [] [] [])))
    (eq? (list "c" "b" "a") (reverse (list "a" "b" "c")))
    (eq? (list 10.0 9.0 8.0 7.0 6.0 5.0 4.0 3.0 2.0 1.0) (reverse (list 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0)))
    (eq? (list id % / * - +) (reverse (list + - * / % id)))
    (eq? (list 'def 'abc 'z 'y 'x) (reverse (list 'x 'y 'z 'abc 'def)))
    (eq? (list #\newline #\space #\z #\y #\x) (reverse (list #\x #\y #\z #\space #\newline)))
    (eq? (list '(3 4 5) '(2 3 4) '(1 2 3)) (reverse (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list [3 4 5] [2 3 4] [1 2 3]) (reverse (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (reverse-vector-test)
  (&&
    (eq? [] (reverse []))
    (eq? (vector 10 9 8 7 6 5 4 3 2 1) (reverse [1 2 3 4 5 6 7 8 9 10]))
    (eq? (vector '() '() '()) (reverse ['() '() '()]))
    (eq? (vector [] [] []) (reverse [[] [] []]))
    (eq? (vector "c" "b" "a") (reverse ["a" "b" "c"]))
    (eq? (vector 10.0 9.0 8.0 7.0 6.0 5.0 4.0 3.0 2.0 1.0) (reverse [1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0]))
    (eq? (vector id % / * - +) (reverse [+ - * / % id]))
    (eq? (vector 'def 'abc 'z 'y 'x) (reverse ['x 'y 'z 'abc 'def]))
    (eq? (vector #\newline #\space #\z #\y #\x) (reverse [#\x #\y #\z #\space #\newline]))
    (eq? (vector '(3 4 5) '(2 3 4) '(1 2 3)) (reverse ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? (vector [3 4 5] [2 3 4] [1 2 3]) (reverse [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (map-while-list-test)
  (&&
    (eq? '() (map-while string odd? '()))
    (eq? (list 1 4 9 16) (map-while (lambda (n) (* n n)) (lambda (n) (< n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list "1" "4" "9" "16") (map-while (lambda (n) (string (* n n))) (lambda (n) (< n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 2 3 4 5) (map-while inc (lambda (n) (< n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 2) (map-while inc odd? (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '() (map-while inc even? (list 1 2 3 4 5 6 7 8 9 10)))
  ))

(define (map-while-vector-test)
  (&&
    (eq? [] (map-while string odd? []))
    (eq? (vector 1 4 9 16) (map-while (lambda (n) (* n n)) (lambda (n) (< n 5)) [1 2 3 4 5 6 7 8 9 10]))
    (eq? (vector "1" "4" "9" "16") (map-while (lambda (n) (string (* n n))) (lambda (n) (< n 5)) [1 2 3 4 5 6 7 8 9 10]))
    (eq? (vector 2 3 4 5) (map-while inc (lambda (n) (< n 5)) [1 2 3 4 5 6 7 8 9 10]))
    (eq? (vector 2) (map-while inc odd? [1 2 3 4 5 6 7 8 9 10]))
    (eq? [] (map-while inc even? [1 2 3 4 5 6 7 8 9 10]))
  ))

(define (map-until-list-test)
  (&&
    (eq? (list 1 4 9 16 25) (map-until (lambda (n) (* n n)) (lambda (n) (> n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list "1" "4" "9" "16" "25") (map-until (lambda (n) (string (* n n))) (lambda (n) (> n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 2 3 4 5 6) (map-until inc (lambda (n) (> n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '() (map-until inc odd? (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 2) (map-until inc even? (list 1 2 3 4 5 6 7 8 9 10)))
  ))

(define (map-until-vector-test)
  (&&
    (eq? [] (map-until string odd? []))
    (eq? (vector 1 4 9 16 25) (map-until (lambda (n) (* n n)) (lambda (n) (> n 5)) [1 2 3 4 5 6 7 8 9 10]))
    (eq? (vector "1" "4" "9" "16" "25") (map-until (lambda (n) (string (* n n))) (lambda (n) (> n 5)) [1 2 3 4 5 6 7 8 9 10]))
    (eq? (vector 2 3 4 5 6) (map-until inc (lambda (n) (> n 5)) [1 2 3 4 5 6 7 8 9 10]))
    (eq? [] (map-until inc odd? [1 2 3 4 5 6 7 8 9 10]))
    (eq? (vector 2) (map-until inc even? [1 2 3 4 5 6 7 8 9 10]))
  ))

(define (take-list-test)
  (&&
    (eq? '() (take 0 (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '() (take 0 (list '() '() '())))
    (eq? '() (take 0 (list [] [] [])))
    (eq? '() (take 0 (list "a" "b" "c")))
    (eq? '() (take 0 (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? '() (take 0 (list + - * / % id)))
    (eq? '() (take 0 (list 'x 'y 'z 'abc 'def)))
    (eq? '() (take 0 (list #\x #\y #\z #\space #\newline)))
    (eq? '() (take 0 (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? '() (take 0 (list [1 2 3] [2 3 4] [3 4 5])))

    (eq? (list 1) (take 1 (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list '()) (take 1 (list '() '() '())))
    (eq? (list []) (take 1 (list [] [] [])))
    (eq? (list "a") (take 1 (list "a" "b" "c")))
    (eq? (list 1.1) (take 1 (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? (list +) (take 1 (list + - * / % id)))
    (eq? (list 'x) (take 1 (list 'x 'y 'z 'abc 'def)))
    (eq? (list #\x) (take 1 (list #\x #\y #\z #\space #\newline)))
    (eq? (list '(1 2 3)) (take 1 (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list [1 2 3]) (take 1 (list [1 2 3] [2 3 4] [3 4 5])))

    (eq? (list 1 2 3 4 5 6 7 8 9 10) (take 1000000 (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list '() '() '()) (take 1000000 (list '() '() '())))
    (eq? (list [] [] []) (take 1000000 (list [] [] [])))
    (eq? (list "a" "b" "c") (take 1000000 (list "a" "b" "c")))
    (eq? (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1) (take 1000000 (list 1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1)))
    (eq? (list + - * / % id) (take 1000000 (list + - * / % id)))
    (eq? (list 'x 'y 'z 'abc 'def) (take 1000000 (list 'x 'y 'z 'abc 'def)))
    (eq? (list #\x #\y #\z #\space #\newline) (take 1000000 (list #\x #\y #\z #\space #\newline)))
    (eq? (list '(1 2 3) '(2 3 4) '(3 4 5)) (take 1000000 (list '(1 2 3) '(2 3 4) '(3 4 5))))
    (eq? (list [1 2 3] [2 3 4] [3 4 5]) (take 1000000 (list [1 2 3] [2 3 4] [3 4 5])))
  ))

(define (take-vector-test)
  (&&
    (eq? [] (take 0 [1 2 3 4 5 6 7 8 9 10]))
    (eq? [] (take 0 ['() '() '()]))
    (eq? [] (take 0 [[] [] []]))
    (eq? [] (take 0 ["a" "b" "c"]))
    (eq? [] (take 0 [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1]))
    (eq? [] (take 0 [+ - * / % id]))
    (eq? [] (take 0 ['x 'y 'z 'abc 'def]))
    (eq? [] (take 0 [#\x #\y #\z #\space #\newline]))
    (eq? [] (take 0 ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [] (take 0 [[1 2 3] [2 3 4] [3 4 5]]))

    (eq? [1] (take 1 [1 2 3 4 5 6 7 8 9 10]))
    (eq? ['()] (take 1 ['() '() '()]))
    (eq? [[]] (take 1 [[] [] []]))
    (eq? ["a"] (take 1 ["a" "b" "c"]))
    (eq? [1.1] (take 1 [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1]))
    (eq? [+] (take 1 [+ - * / % id]))
    (eq? ['x] (take 1 ['x 'y 'z 'abc 'def]))
    (eq? [#\x] (take 1 [#\x #\y #\z #\space #\newline]))
    (eq? ['(1 2 3)] (take 1 ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [[1 2 3]] (take 1 [[1 2 3] [2 3 4] [3 4 5]]))

    (eq? [1 2 3 4 5 6 7 8 9 10] (take 1000000 [1 2 3 4 5 6 7 8 9 10]))
    (eq? ['() '() '()] (take 1000000 ['() '() '()]))
    (eq? [[] [] []] (take 1000000 [[] [] []]))
    (eq? ["a" "b" "c"] (take 1000000 ["a" "b" "c"]))
    (eq? [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1] (take 1000000 [1.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10.1]))
    (eq? [+ - * / % id] (take 1000000 [+ - * / % id]))
    (eq? ['x 'y 'z 'abc 'def] (take 1000000 ['x 'y 'z 'abc 'def]))
    (eq? [#\x #\y #\z #\space #\newline] (take 1000000 [#\x #\y #\z #\space #\newline]))
    (eq? ['(1 2 3) '(2 3 4) '(3 4 5)] (take 1000000 ['(1 2 3) '(2 3 4) '(3 4 5)]))
    (eq? [[1 2 3] [2 3 4] [3 4 5]] (take 1000000 [[1 2 3] [2 3 4] [3 4 5]]))
  ))

(define (take-while-list-test)
  (&&
    (eq? '() (take-while always-true '() ))
    (eq? (list 1 2 3 4 5 6 7 8 9 10) (take-while always-true (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '()  (take-while always-false (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 1 2 3 4) (take-while (lambda (n) (< n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '()  (take-while (lambda (n) (> n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
  ))

(define (take-while-vector-test)
  (&&
    (eq? [] (take-while always-true []))
    (eq? [1 2 3 4 5 6 7 8 9 10] (take-while always-true [1 2 3 4 5 6 7 8 9 10]))
    (eq? [] (take-while always-false [1 2 3 4 5 6 7 8 9 10]))
    (eq? [1 2 3 4] (take-while (lambda (n) (< n 5)) [1 2 3 4 5 6 7 8 9 10]))
    (eq? [] (take-while (lambda (n) (> n 5)) [1 2 3 4 5 6 7 8 9 10]))
  ))

(define (take-until-list-test)
  (&&
    (eq? '() (take-until always-true '() ))
    (eq? '() (take-until always-true (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 1 2 3 4 5 6 7 8 9 10)  (take-until always-false (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '() (take-until (lambda (n) (< n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 1 2 3 4 5)  (take-until (lambda (n) (> n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
  ))

(define (take-until-vector-test)
  (&&
    (eq? [] (take-until always-true []))
    (eq? [] (take-until always-true [1 2 3 4 5 6 7 8 9 10]))
    (eq? [1 2 3 4 5 6 7 8 9 10] (take-until always-false [1 2 3 4 5 6 7 8 9 10]))
    (eq? [] (take-until (lambda (n) (< n 5)) [1 2 3 4 5 6 7 8 9 10]))
    (eq? [1 2 3 4 5] (take-until (lambda (n) (> n 5)) [1 2 3 4 5 6 7 8 9 10]))
  ))

(define (drop-while-list-test)
  (&&
    (eq? '() (drop-while always-true '() ))
    (eq? '() (drop-while always-true (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 1 2 3 4 5 6 7 8 9 10)  (drop-while always-false (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 5 6 7 8 9 10) (drop-while (lambda (n) (< n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 1 2 3 4 5 6 7 8 9 10)  (drop-while (lambda (n) (> n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
  ))

(define (drop-while-vector-test)
  (&&
    (eq? [] (drop-while always-true []))
    (eq? [] (drop-while always-true [1 2 3 4 5 6 7 8 9 10]))
    (eq? [1 2 3 4 5 6 7 8 9 10] (drop-while always-false [1 2 3 4 5 6 7 8 9 10]))
    (eq? [5 6 7 8 9 10] (drop-while (lambda (n) (< n 5)) [1 2 3 4 5 6 7 8 9 10]))
    (eq? [1 2 3 4 5 6 7 8 9 10] (drop-while (lambda (n) (> n 5)) [1 2 3 4 5 6 7 8 9 10]))
  ))

(define (drop-until-list-test)
  (&&
    (eq? '() (drop-until always-true '() ))
    (eq? (list 1 2 3 4 5 6 7 8 9 10) (drop-until always-true (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? '()  (drop-until always-false (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 1 2 3 4 5 6 7 8 9 10) (drop-until (lambda (n) (< n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
    (eq? (list 6 7 8 9 10)  (drop-until (lambda (n) (> n 5)) (list 1 2 3 4 5 6 7 8 9 10)))
  ))

(define (drop-until-vector-test)
  (&&
    (eq? [] (drop-until always-true []))
    (eq? [1 2 3 4 5 6 7 8 9 10] (drop-until always-true [1 2 3 4 5 6 7 8 9 10]))
    (eq? [] (drop-until always-false [1 2 3 4 5 6 7 8 9 10]))
    (eq? [1 2 3 4 5 6 7 8 9 10] (drop-until (lambda (n) (< n 5)) [1 2 3 4 5 6 7 8 9 10]))
    (eq? [6 7 8 9 10] (drop-until (lambda (n) (> n 5)) [1 2 3 4 5 6 7 8 9 10]))
  ))

(define (zip-list-test)
  (&&
    (eq? '() (zip '() '()))
    (eq? '() (zip '() (list 1 2 3 4 5)))
    (eq? '() (zip (list 1 2 3 4 5) '()))
    (eq? (list (list 1 6) (list 2 7)) (zip (list 1 2) (list 6 7 8 9 10)))
    (eq? (list (list 1 6) (list 2 7)) (zip (list 1 2 3 4 5) (list 6 7)))
    (eq? (list (list 1 6) (list 2 7) (list 3 8) (list 4 9) (list 5 10)) (zip (list 1 2 3 4 5) (list 6 7 8 9 10)))
  ))

(define (zip-vector-test)
  (&&
    (eq? [] (zip [] []))
    (eq? [] (zip [] [1 2 3 4 5]))
    (eq? [] (zip [1 2 3 4 5] []))
    (eq? [[1 6] [2 7]] (zip [1 2] [6 7 8 9 10]))
    (eq? [[1 6] [2 7]] (zip [1 2 3 4 5] [6 7]))
    (eq? [[1 6] [2 7] [3 8] [4 9] [5 10]] (zip [1 2 3 4 5] [6 7 8 9 10]))
  ))


)

(println! (string "(null?-test): ............... " (null?-test)))
(println! (string "(symbol?-test): ............. " (symbol?-test)))
(println! (string "(string?-test): ............. " (string?-test)))
(println! (string "(char?-test): ............... " (char?-test)))
(println! (string "(integer?-test): ............ " (integer?-test)))
(println! (string "(real?-test): ............... " (real?-test)))
(println! (string "(cons?-test): ............... " (cons?-test)))
(println! (string "(func?-test): ............... " (func?-test)))
(println! (string "(bool?-test): ............... " (bool?-test)))
(println! (string "(box?-test): ................ " (box?-test)))
(println! (string "(list?-test): ............... " (list?-test)))
(println! (string "(vector?-test): ............. " (vector?-test)))
(println! "")
(println! (string "(eq?-list-test): ............ " (eq?-list-test)))
(println! (string "(eq?-nil-test): ............. " (eq?-nil-test)))
(println! (string "(eq?-vector-test): .......... " (eq?-vector-test)))
(println! (string "(eq?-integer-test): ......... " (eq?-integer-test)))
(println! (string "(eq?-real-test): ............ " (eq?-real-test)))
(println! (string "(eq?-string-test): .......... " (eq?-string-test)))
(println! (string "(eq?-char-test): ............ " (eq?-char-test)))
(println! (string "(eq?-box-test): ............. " (eq?-box-test)))
(println! (string "(eq?-symbol-test): .......... " (eq?-symbol-test)))
(println! (string "(eq?-function-test): ........ " (eq?-function-test)))
(println! (string "(eq?-boolean-test): ......... " (eq?-boolean-test)))
(println! "")
(println! (string "(first-list-test): .......... " (first-list-test)))
(println! (string "(first-vector-test): ........ " (first-vector-test)))
(println! (string "(second-list-test): ......... " (second-list-test)))
(println! (string "(second-vector-test): ....... " (second-vector-test)))
(println! (string "(third-list-test): .......... " (third-list-test)))
(println! (string "(third-vector-test): ........ " (third-vector-test)))
(println! (string "(rest-list-test): ........... " (rest-list-test)))
(println! (string "(rest-vector-test): ......... " (rest-vector-test)))
(println! (string "(nth-list-test): ............ " (nth-list-test)))
(println! (string "(nth-vector-test): .......... " (nth-vector-test)))
(println! "")
(println! (string "(empty?-list-test): ......... " (empty?-list-test)))
(println! (string "(empty?-vector-test): ....... " (empty?-vector-test)))
(println! "")
(println! (string "(foldl-list-test): .......... " (foldl-list-test)))
(println! (string "(foldl-vector-test): ........ " (foldl-vector-test)))
(println! (string "(map-list-test): ............ " (map-list-test)))
(println! (string "(map-vector-test): .......... " (map-vector-test)))
(println! (string "(filter-list-test): ......... " (filter-list-test)))
(println! (string "(filter-vector-test): ....... " (filter-vector-test)))
(println! (string "(append-list-nil-test): ..... " (append-list-nil-test)))
(println! (string "(append-list-test): ......... " (append-list-test)))
(println! (string "(append-vector-empty-test): . " (append-vector-empty-test)))
(println! (string "(append-vector-test): ....... " (append-vector-test)))
(println! (string "(find-first-list-test): ..... " (find-first-list-test)))
(println! (string "(find-first-vector-test): ... " (find-first-vector-test)))
(println! "")
(println! (string "(->vector-list-test): ....... " (->vector-list-test)))
(println! (string "(->vector-vector-test): ..... " (->vector-vector-test)))
(println! (string "(->list-list-test): ......... " (->list-list-test)))
(println! (string "(->list-vector-test): ....... " (->list-vector-test)))
(println! "")
(println! (string "(copy-list-test): ........... " (copy-list-test)))
(println! (string "(copy-vector-test): ......... " (copy-vector-test)))
(println! (string "(but-last-list-test): ....... " (but-last-list-test)))
(println! (string "(but-last-vector-test): ..... " (but-last-vector-test)))
(println! (string "(reverse-list-test): ........ " (reverse-list-test)))
(println! (string "(reverse-vector-test): ...... " (reverse-vector-test)))
(println! "")
(println! (string "(map-while-list-test): ...... " (map-while-list-test)))
(println! (string "(map-while-vector-test): .... " (map-while-vector-test)))
(println! (string "(map-until-list-test): ...... " (map-until-list-test)))
(println! (string "(map-until-vector-test): .... " (map-until-vector-test)))
(println! (string "(take-list-test): ........... " (take-list-test)))
(println! (string "(take-vector-test): ......... " (take-vector-test)))
(println! (string "(take-while-list-test): ..... " (take-while-list-test)))
(println! (string "(take-while-vector-test): ... " (take-while-vector-test)))
(println! (string "(take-until-list-test): ..... " (take-until-list-test)))
(println! (string "(take-until-vector-test): ... " (take-until-vector-test)))
(println! (string "(drop-while-list-test): ..... " (drop-while-list-test)))
(println! (string "(drop-while-vector-test): ... " (drop-while-vector-test)))
(println! (string "(drop-until-list-test): ..... " (drop-until-list-test)))
(println! (string "(drop-until-vector-test): ... " (drop-until-vector-test)))
(println! "")
(println! (string "(zip-list-test): ............ " (zip-list-test)))
(println! (string "(zip-vector-test):........... " (zip-vector-test)))


 

(comment println! [])


'lyra-core-tests-loaded

