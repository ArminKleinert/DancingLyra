(when (not (defined? 'lyra-core-typed-loaded))

(define lyra-core-typed-loaded #t)

(let ((_types (box []))
      (associated (lambda (xs sym)
                    (if (null? xs)
                      '()
                      (if (= (car (car xs)) sym)
                        (car (cdr (car xs)))
                        (associated (cdr xs) sym)))))
      (vector-set
        (lambda (v idx xyz)
          (_vector-iterate v []
            (lambda (acc e i)
              (if (= i idx)
                (_vector-append acc xyz)
                (_vector-append acc e))))))
      (list-append1
            (lambda (l0 l1)
              (if (null? l0)
                l1
                (cons (car l0) (list-append1 (cdr l0) l1))))))

(define (register-type!)
  (box-swap! _types (lambda (x) (_vector-append x '())))
  (- (_vector-size (unbox _types)) 1))

(define (find-type-fn x sym)
  (associated
    (_vector-get (unbox _types) (lyra-type-id x))
    sym))

(define (add-type-fn! type sym f)
  (let* (v (unbox _types))
    (box-set! _types
      (vector-set
        v type
        (cons
          (list sym f)
          (_vector-get v type))))
    type))

(define (add-type-fns! type sym-to-f-list)
    (let* (v (unbox _types))
      (box-set! _types
        (vector-set
          v type
          (list-append1
            sym-to-f-list
            (_vector-get v type))))
      type))

(def-macro (def-generic obj sig fallback)
  (let ((fn (car sig))
        (args (cdr sig))
        (sy (gensym)))
    (list 'define (cons fn args)
      (list 'let* (list sy (list 'find-type-fn obj (list 'quote fn)))
        (list 'if sy (cons sy args) (cons fallback args))))))

(def-macro (def-method t-id globalname sig & body)
  (if (cons? sig)
    (let ((fn (car sig))
          (args (cdr sig)))
      (list 'begin
        (cons 'define (cons sig body))
        (list 'add-type-fn! t-id (list 'quote globalname) fn)
        fn))
    (list 'begin
      (list 'add-type-fn! t-id globalname sig)
      sig)))
      
(define (get-functions-for i) (_vector-get (unbox _types) i))
(define (get-functions-for-obj o) (_vector-get (unbox _types) (lyra-type-id o)))

(define nil-id    (register-type!))
(define symbol-id (register-type!))
(define string-id (register-type!))
(define char-id   (register-type!))
(define fixnum-id (register-type!))
(define real-id   (register-type!))
(define cons-id   (register-type!))
(define func-id   (register-type!))
(define bool-id   (register-type!))
(define vector-id (register-type!))
(define box-id    (register-type!))

; Type checkers
(define (null? x) (= (lyra-type-id x) nil-id))
(define (symbol? x) (= (lyra-type-id x) symbol-id))
(define (string? x) (= (lyra-type-id x) string-id))
(define (char? x) (= (lyra-type-id x) char-id))
(define (integer? x) (= (lyra-type-id x) fixnum-id))
(define (real? x) (= (lyra-type-id x) real-id))
(define (cons? x) (= (lyra-type-id x) cons-id))
(define (func? x) (= (lyra-type-id x) func-id))
(define (bool? x) (= (lyra-type-id x) bool-id))
(define boolean? bool?)
(define (box? x) (= (lyra-type-id x) box-id))

(def-generic x (unwrap x) id)
(def-generic x (list? x) always-false)
(def-generic x (vector? x) always-false)
(def-generic x (number? x) (lambda (n) (or (integer? n) (real? n))))
(def-generic x (eq? x y) =)

(def-generic x (force-eval x) id) ; TODO

(def-generic x (->string x) _string)
))

'lyra-core-typed-loaded
