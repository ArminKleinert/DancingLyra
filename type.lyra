(module core-typed
 [[register-type! register-type!]
  [find-type-fn find-type-fn]
  [add-type-fn! add-type-fn!]
  [add-type-fns! add-type-fns!]
  [def-generic def-generic]
  [def-method def-method]
  [null? null?] 
  [symbol? symbol?] 
  [string? string?] 
  [char? char?] 
  [integer? integer?]
  [real? real?]
  [cons? cons?]
  [func? func?]
  [boolean? boolean?]
  [box? box?]
  [unwrap unwrap]
  [list? list?]
  [vector? vector?]
  [number? number?]
  [eq? eq?]
  [force-eval force-eval]
  [->string ->string]
  [copy copy]
  [nil-id nil-id]
  [symbol-id symbol-id]
  [string-id string-id]
  [char-id char-id]
  [fixnum-id fixnum-id]
  [real-id real-id]
  [cons-id cons-id]
  [func-id func-id]
  [bool-id bool-id]
  [vector-id vector-id]
  [box-id box-id]]


; Structure of each node.
; [function-name function left right]

(define (type-tree-insert top name fn)
  (if (not top)
    (vector name fn '() '())
    (let* (top-name (_vector-get top 0))
      (cond ((= top-name name)
              (vector top-name fn (_vector-get top 2) (_vector-get top 3)))
            ((< top-name name)
              (vector top-name (_vector-get top 1) (_vector-get top 2) (type-tree-insert (_vector-get top 3) name fn)))
            (#t
              (vector top-name (_vector-get top 1) (type-tree-insert (_vector-get top 2) name fn) (_vector-get top 3)))))))

(define (get-fn top name)
  (if (not top)
    '()
    (let* (top-name (_vector-get top 0))
      (cond ((= top-name name) (_vector-get top 1))
            ((> top-name name) (get-fn (_vector-get top 2) name))
            (#t (get-fn (_vector-get top 3) name))))))


(let ((_types (box []))
      (vector-set
        (lambda (v idx xyz)
          (_vector-iterate v []
            (lambda (acc e i)
              (if (= i idx)
                (_vector-add acc xyz)
                (_vector-add acc e)))))))

(define (register-type!)
  (box-swap! _types (lambda (x) (_vector-add x '())))
  (- (_vector-size (unbox _types)) 1))

(define (find-type-fn x sym)
  (get-fn
    (_vector-get (unbox _types) (lyra-type-id x))
    sym))

(define (add-type-fn! type sym f)
  (let* (v (unbox _types))
    (box-set! _types
      (vector-set
        v type
        (type-tree-insert (_vector-get v type) sym f))))
  type)

(define (add-type-fns! type sym-to-f-list)
  (if (null? sym-to-f-list)
    type
    (begin
      (add-type-fn! type (car (car sym-to-f-list)) (car (cdr (car sym-to-f-list))))
      (add-type-fns! type (cdr sym-to-f-list)))))

(def-macro (def-generic obj sig fallback)
  (let ((fn (car sig))
        (args (cdr sig))
        (sy (gensym)))
    (list 'define (cons fn args)
      (list 'let* (list sy (list 'find-type-fn obj (list 'quote fn)))
        (list 'if sy (cons sy args) (cons fallback args))))))

(def-macro (def-method t-id globalname sig & body)
  (if (cons? sig)
    (let ((fn (car sig))
          (args (cdr sig)))
      (list 'begin
        (cons 'define (cons sig body))
        (list 'add-type-fn! t-id (list 'quote globalname) fn)
        fn))
    (list 'begin
      (list 'add-type-fn! t-id (list 'quote globalname) sig)
      sig)))

(define nil-id    (register-type!))
(define symbol-id (register-type!))
(define string-id (register-type!))
(define char-id   (register-type!))
(define fixnum-id (register-type!))
(define real-id   (register-type!))
(define cons-id   (register-type!))
(define func-id   (register-type!))
(define bool-id   (register-type!))
(define vector-id (register-type!))
(define box-id    (register-type!))

; Type checkers
(define (null? x) (= (lyra-type-id x) nil-id))
(define (symbol? x) (= (lyra-type-id x) symbol-id))
(define (string? x) (= (lyra-type-id x) string-id))
(define (char? x) (= (lyra-type-id x) char-id))
(define (integer? x) (= (lyra-type-id x) fixnum-id))
(define (real? x) (= (lyra-type-id x) real-id))
(define (cons? x) (= (lyra-type-id x) cons-id))
(define (func? x) (= (lyra-type-id x) func-id))
(define (bool? x) (= (lyra-type-id x) bool-id))
(define boolean? bool?)
(define (box? x) (= (lyra-type-id x) box-id))

(def-generic x (unwrap x) id)
(def-generic x (list? x) always-false)
(def-generic x (vector? x) always-false)
(def-generic x (number? x) (lambda (n) (or (integer? n) (real? n))))
(def-generic x (eq? x y) =)

(def-generic x (copy x) id)

(def-generic x (force-eval x) id) ; TODO

(def-generic x (->string x) _string)
))
