(module core-vector
 [[offset-vector make-offset-vector]
  [offset-vector? offset-vector?]
  [vector-pair? vector-pair?]
  [vector-size vector-size]
  [vector-get vector-get]
  [vector-add vector-add]
  [vector-iterate vector-iterate]
  [vector-set vector-set]
  [vector-append vector-append]]

(def-generic x (vector-size x) _vector-size)
(def-generic x (vector-get x i) nothing)
(def-generic x (vector-add x y) _vector-add)
;; (def-generic x (vector-append x y) nothing)
(def-generic x (vector-iterate x acc fn) _vector-iterate)
(def-generic x (vector-set x i e) nothing)

(comment "Functions provided for every vector-type:"
  vector-size size vector-add vector-append append ->vector but-last foldl map reverse ->string find-first eq? vector-get nth filter take drop vector-set set-at vector-iterate empty? list? vector? ->list map-while map-until take-while take-until drop-while drop-until zip
)

; --------------------------------------------------

(let ((offset-vector-id (register-type!))
      (vector-pair-id (register-type!)))
(define-record offset-vector-id offset-vector v start len)

(define offset-vector make-offset-vector)

(define (offset-vector-iterate ov x f)
  (let ((len (offset-vector-len ov))
        (helper (lambda (acc i)
          (if (= i len)
            acc
            (helper (f acc (offset-vector-get ov i).? i) (inc i))))))
    (helper x 0)))

(define (offset-vector-size ov) (offset-vector-len ov))
(define (offset-vector-empty? ov) (= (offset-vector-len ov) 0))
(define (offset-vector-vec ov) (offset-vector-v ov))

(define (offset-vector-get ov i)
  (if (or (< i 0) (>= i (offset-vector-len ov)))
    '()
    (vector-get (offset-vector-vec ov) (+ i (offset-vector-start ov)))))

(def-method offset-vector-id ->vector (offset-vector->vector ov)
  (offset-vector-iterate ov []
    (lambda (acc e i) (vector-add acc e))))

(def-method offset-vector-id ->string (offset-vector->string ov)
  (let* (f (lambda (x y) (string x " " y)))
    (string "[" (foldl1 f ov) "]")))

(def-method offset-vector-id rest (offset-vector-rest ov)
  (let* (l (offset-vector-len ov))
    (cond ((<= l 1) [])
          (#t (offset-vector
                (offset-vector-v ov)
                (inc (offset-vector-start ov))
                (dec l))))))

(def-method offset-vector-id drop (offset-vector-drop n ov)
  (let* (l (offset-vector-len ov))
    (cond ((<= l n) [])
          (#t (offset-vector
                (offset-vector-v ov)
                (+ (offset-vector-start ov) n)
                (- l n))))))

(def-method offset-vector-id take (offset-vector-take n ov)
  (let* (l (offset-vector-len ov))
    (cond ((<= l n) [])
          (#t (offset-vector
                (offset-vector-v ov)
                (offset-vector-start ov)
                (- l n))))))

(def-method offset-vector-id but-last (offset-vector-but-last n ov)
  (if (<= (offset-vector-len ov) 1)
    []
    (offset-vector
      (offset-vector-v ov)
      (offset-vector-start ov)
      (dec (offset-vector-len ov)))))

; --------------------------------------------------

(define-record vector-pair-id vector-pair x y)

(def-method vector-pair-id vector-size(vector-pair-size vp)
  (+ (vector-size (vector-pair-x vp)) (vector-size (vector-pair-y vp))))

(def-method vector-pair-id vector-add(vector-pair-add vp e)
  (make-vector-pair (vector-pair-x vp) (vector-add (vector-pair-y vp) e)))

(def-method vector-pair-id append(vector-pair-append vp v1)
  (if (empty? v1) vp (make-vector-pair (->vector vp) v1)))

(def-method vector-pair-id ->vector(vector-pair->vector vp)
  (vector-iterate (vector-pair-y vp) (vector-pair-x vp)
    (lambda (acc e i) (vector-add acc e))))

(def-method vector-pair-id but-last (vector-pair-but-last vp)
  (make-vector-pair (vector-pair-x vp) (but-last (vector-pair-y vp))))

(def-method vector-pair-id foldl (vector-pair-foldl f x vp)
  (foldl f (foldl f x (vector-pair-x vp)) (vector-pair-y vp)))

(def-method vector-pair-id map (vector-pair-map f vp)
  (make-vector-pair (map f (vector-pair-x vp)) (map f (vector-pair-y vp))))

(def-method vector-pair-id reverse (vector-pair-reverse vp)
  (make-vector-pair (reverse (vector-pair-y vp)) (reverse (vector-pair-x vp))))

(def-method vector-pair-id ->string (vector-pair->string vp)
  (let ((f (lambda (s0 s1) (string s0 " " s1)))
        (v0-s (foldl f "" (vector-pair-x vp)))
        (v1-s (foldl f "" (vector-pair-y vp))))
    (string "[" v0-s v1-s "]")))

(def-method vector-pair-id find-first (vector-pair-find-first p vp)
  (let* (res0 (find-first p (vector-pair-x vp)))
    (if (null? res0)
      (find-first p (vector-pair-y vp))
      res0)))

(def-method vector-pair-id eq? (vector-pair-eq? v0 v1)
  (if (vector-pair? v1)
    (and (eq? (vector-pair-x v0) (vector-pair-x v1))
        (eq? (vector-pair-y v0) (vector-pair-y v1)))
    (eq? (->vector v0) v1)))

(let* (vp-get (lambda (vp i)
        (let* (vpxsize (vector-size (vector-pair-x vp)))
          (cond
            ((> vpxsize i) (vector-get (vector-pair-x vp) i))
            ((> (vector-size (vector-pair-y vp)) (- i vpxsize))
              (vector-get (vector-pair-y vp) (- i vpxsize)))
            (#t '())))))
  (add-type-fns! vector-pair-id
    (list
      (list 'vector-get vp-get)
      (list 'nth vp-get)))
  )

(def-method vector-pair-id filter (vector-pair-filter p vp)
  (make-vector-pair (filter p (vector-pair-x vp)) (filter p (vector-pair-y vp))))

(def-method vector-pair-id take (vector-pair-take n vp)
  (cond ((<= n (vector-size (vector-pair-x vp))) (take n (vector-pair-x vp)))
        (#t (make-vector-pair (vector-pair-x vp) (take (- n (vector-size (vector-pair-x vp))) (vector-pair-y vp))))))

(def-method vector-pair-id drop (vector-pair-drop n vp)
  (cond ((= n 0) vp)
        ((<= n (vector-size vp)) [])
        ((< n (vector-size (vector-pair-x vp)))
          (make-vector-pair (drop (- n (vector-size (vector-pair-x vp))) (vector-pair-y vp))
                            (vector-pair-y vp)))
        (#t (drop (- n (vector-size (vector-pair-x vp))) (vector-pair-y vp)))))

(let* (setter (lambda (vp i e)
    (if (< i (vector-pair-x vp))
      (make-vector-pair (vector-set (vector-pair-x vp) i e) (vector-pair-y vp))
      (make-vector-pair
        (vector-pair-x vp)
        (vector-set (vector-pair-y vp) (- i (vector-size (vector-pair-x vp))) e)))))
  (add-type-fns! vector-pair-id
    (list
      (list 'vector-set setter)
      (list 'set-at setter))))

(def-method vector-pair-id vector-iterate (vector-pair-iterate vp e fn)
  (vector-iterate (->vector (vector-pair-y vp))
    (vector-iterate (->vector (vector-pair-x vp)) e fn)
      fn))

; --------------------------------------------------

(def-method vector-id vector-get (safe-vector-get v i)
  (if (or (< i 0) (>= i (vector-size v)))
    (nothing)
    (maybe (_vector-get v i))))

(def-method vector-id ->string (vector->string v)
  (string "["
    (vector-iterate v ""
      (lambda (acc e i)
        (string
          acc (->string e)
          (if (< i (- (vector-size v) 1)) " " ""))))
    "]"))

(define (_vector-set v idx element)
  (vector-iterate v []
    (lambda (acc e i)
      (if (= i idx) (vector-add acc element) (vector-add acc e)))))

(define (vector-eq? v0 v1)
  (cond ((not (vector? v1)) #f)
        ((= (vector-size v0) (vector-size v1))
          (vector-iterate v0 #t
            (lambda (acc e i)
              (and acc (eq? e (nth v1 i).?)))))
        (#t #f)))

(define (vector-foldl f x v)
  (vector-iterate v x (lambda (acc e i) (f acc e))))

(define (vector-map f v)
  (vector-iterate v [] (lambda (acc e i) (vector-add acc (f e)))))

(define (vector-filter p v)
  (vector-iterate v []
    (lambda (acc e i)
      (if (p e) (vector-add acc e) acc))))

(define (vector-append v v1)
(cond ((empty? v) v1)
      ((empty? v1) v)
      (#t (make-vector-pair v (->vector v1)))))

(define (vector-find-first p v)
  (maybe (car (cdr
    (vector-iterate v (list #f (nothing).?)
      (lambda (acc e i)
        (cond ((car acc) acc)
              ((p e) (list #t e))
              (#t acc))))))))

(define (vector->list v)
  (let* (iter (lambda (i nl)
          (if (< i 0)
            nl
            (iter (dec i)
              (cons (vector-get v i).? nl)))))
    (iter (dec (vector-size v)) '())))

(define (vector-but-last v)
  (if (vector-empty? v)
    []
    (let* (last-idx (- (_vector-size v) 1))
      (offset-vector v 0 last-idx))))

(define (vector-reverse v)
  (let* (vlen (- (_vector-size v) 1))
    (vector-iterate v []
      (lambda (acc e i)
        (vector-add acc (vector-get v (- vlen i)).?)))))

(define (vector-take n v)
  (if (>= n (vector-size v))
    v
    (offset-vector v 0 (min n (vector-size v)))))

(define (vector-drop n v)
  (if (>= n (vector-size v))
    []
    (offset-vector v n (- (vector-size v) n))))

(define (vector-map-while f p v)
  (car
    (vector-iterate v (list [] #f)
      (lambda (acc e i)
        (if (car (cdr acc))
          acc
          (if (p e)
            (list (vector-add (car acc) (f e)) #f)
            (list (car acc) #t)))))))

(define (vector-map-until f p v)
  (map-while f (lambda (e) (not (p e))) v))

(define (vector-take-while p v)
  (car
    (vector-iterate v (list [] #f)
      (lambda (acc e i)
        (if (car (cdr acc))
          acc
          (if (p e)
            (list (vector-add (car acc) e) #f)
            (list (car acc) #t)))))))

(define (vector-take-until p v)
  (take-while (lambda (e) (not (p e))) v))

(define (vector-drop-while p v)
  (car
    (vector-iterate v (list [] #t)
      (lambda (acc e i)
        (if (and (car (cdr acc)) (p e))
          acc
          (list (vector-add (car acc) e) #f)
          )))))

(define (vector-drop-until p v)
  (drop-while (lambda (e) (not (p e))) v))

(define (vector-zip v0 v1)
  (let* (v1size (vector-size (->vector v1)))
    (vector-iterate v0 []
      (lambda (acc e i)
        (if (< i v1size)
          (vector-add acc (vector e (vector-get v1 i).?))
          acc)))))

(define (vector-empty? v)
  (= (vector-size v) 0))

(def-method vector-id sort (vector-insertion-sort coll)
  (->vector (sort (->list coll))))

(def-method vector-id sort-by (vector-insertion-sort-by comp coll)
  (->vector (sort-by comp (->list coll))))

; --------------------------------------------------

(add-type-fns! vector-id
  (list
    (list 'vector-iterate _vector-iterate)
    (list 'vector-add _vector-add)
    (list 'eq? vector-eq?)
    (list 'foldl vector-foldl)
    (list 'map vector-map)
    (list 'filter vector-filter)
    (list 'append vector-append)
    (list 'find-first vector-find-first)
    (list '->list vector->list)
    (list 'but-last vector-but-last)
    (list 'reverse vector-reverse)
    (list 'take vector-take)
    (list 'drop vector-drop)
    (list 'map-while vector-map-while)
    (list 'map-until vector-map-until)
    (list 'take-while vector-take-while)
    (list 'take-until vector-take-until)
    (list 'drop-while vector-drop-while)
    (list 'drop-until vector-drop-until)
    (list 'zip vector-zip)
    (list 'vector-set _vector-set)
    (list 'set-at _vector-set)
    (list 'size vector-size)
    (list 'first (lambda (v) (vector-get v 0)))
    (list 'second (lambda (v) (vector-get v 1)))
    (list 'third (lambda (v) (vector-get v 2)))
    (list 'rest (lambda (v) (if (empty? v) (nothing) (drop 1 v))))
    (list 'vector-size (lambda (v) (_vector-size v)))
    (list 'empty? vector-empty?)
    (list 'nth (lambda (v idx) (vector-get v idx)))
    (list '->vector id)
    (list 'copy id)
    (list 'list? always-false)
    (list 'vector? always-true)
    (list '->string vector->string)))



(add-type-fns! offset-vector-id
  (list
    (list 'vector-get offset-vector-get)
    (list 'vector-iterate offset-vector-iterate)
    (list 'vector-add (lambda (v x) (vector-add (->vector v) x)))
    (list 'eq? vector-eq?)
    (list 'foldl vector-foldl)
    (list 'map vector-map)
    (list 'filter vector-filter)
    (list 'append (lambda (v y) (append (->vector v) y)))
    (list 'find-first (lambda (p v) (find-first p (->vector v))))
    (list '->list (lambda (v) (->list (->vector v))))
    (list 'reverse vector-reverse)
    (list 'map-while (lambda (f p v) (map-while f p (->vector v))))
    (list 'map-until (lambda (f p v) (map-until f p (->vector v))))
    (list 'take-while (lambda (p v) (take-while p (->vector v))))
    (list 'take-until (lambda (p v) (take-until p (->vector v))))
    (list 'drop-while (lambda (p v) (drop-while p (->vector v))))
    (list 'drop-until (lambda (p v) (drop-until p (->vector v))))
    (list 'zip (lambda (x y) (zip (->vector x) (->vector y))))
    (list 'vector-set (lambda (v i e) (vector-set (->vector v) i e)))
    (list 'set-at (lambda (v i e) (vector-set (->vector v) i e)))
    (list 'size offset-vector-size)
    (list 'first (lambda (v) (vector-get v 0)))
    (list 'second (lambda (v) (vector-get v 1)))
    (list 'third (lambda (v) (vector-get v 2)))
    (list 'vector-size offset-vector-size)
    (list 'empty? (lambda (v) (= (vector-size v) 0)))
    (list 'nth offset-vector-get)
    (list 'copy id)
    (list 'list? always-false)
    (list 'vector? always-true)
    (list '->string offset-vector->string)
    ))

(add-type-fns! vector-pair-id
  (list
    (list 'empty? (lambda (vp) (and (empty? (vector-pair-x vp))
                                    (empty? (vector-pair-y vp)))))
    (list 'copy id)
    (list 'list? always-false)
    (list 'vector? always-true)
    (list '->list (lambda (vp) (append (->list (vector-pair-x vp))
                                       (->list (vector-pair-y vp)))))
    
    ; TODO All need proper implementation (Especially vector-get and nth !!!)
    (list 'map-while (lambda (f p vp) (map-while f p (->vector vp)))) ; TODO
    (list 'map-until (lambda (f p vp) (map-until f p (->vector vp)))) ; TODO
    (list 'take-while (lambda (p vp) (take-while p (->vector vp)))) ; TODO
    (list 'take-until (lambda (p vp) (take-until p (->vector vp)))) ; TODO
    (list 'drop-while (lambda (p vp) (drop-while p (->vector vp)))) ; TODO
    (list 'drop-until (lambda (p vp) (drop-until p (->vector vp)))) ; TODO
    (list 'zip (lambda (vp v1) (zip (->vector vp) v1))) ; TODO
    ))
))
