(when (not (defined? 'lyra-core-vector-loaded))

(define lyra-core-vector-loaded #t)

(define (vector-size v)
  (let* (f (find-type-fn v 'vector-size)) (if f (f v) (_vector-size v))))

(define (vector-get v i)
  (let* (f (find-type-fn v '_vector-get))
    (if f
      (f v i)
      (if (or (< i 0) (>= i (vector-size v)))
        '() ; Default to nil if out of range
        (_vector-get v i)))))

(define (vector-append v e)
  (let* (f (find-type-fn v 'vector-append))
    (if f (f v e) (_vector-append v e))))

(define (vector-iterate v acc fn)
  (let* (f (find-type-fn v 'vector-iterate))
    (if f (f v acc fn) (_vector-iterate v acc fn))))

(define (vector-set v i e)
  ((find-type-fn v 'vector-set) v i e))


; --------------------------------------------------

(comment
(define offset-vector-id (add-type!))
(define-record offset-vector-id offset-vector v start end)

vector-size vector-append append ->vector but-last foldl map reverse ->string find-first eq? vector-get nth filter take drop vector-set set-at vector-iterate empty? list? vector? ->list map-while map-until take-while take-until drop-while drop-until zip
)

; --------------------------------------------------

(define vector-pair-id (add-type!))
(define-record vector-pair-id vector-pair x y)

(add-type-fn! vector-pair-id 'vector-size
  (lambda (vp)
    (+ (_vector-size (vector-pair-x vp)) (_vector-size (vector-pair-y vp)))))

(add-type-fn! vector-pair-id 'vector-append
  (lambda (vp e)
    (make-vector-pair (vector-pair-x vp) (vector-append (vector-pair-y vp) e))))

; TODO Needs optimization
(add-type-fn! vector-pair-id 'append
  (lambda (vp v1)
    (if (empty? v1)
      vp
      (append (->vector vp) v1))))

(add-type-fn! vector-pair-id '->vector
  (lambda (vp)
    (vector-iterate (vector-pair-y vp) (vector-pair-x vp)
      (lambda (acc e i) (_vector-append acc e)))))

(add-type-fn! vector-pair-id 'but-last
  (lambda (vp) 
    (make-vector-pair (vector-pair-x vp) (but-last (vector-pair-y vp)))))

(add-type-fn! vector-pair-id 'foldl
  (lambda (f x vp) 
    (foldl f (foldl f x (vector-pair-x vp)) (vector-pair-y vp))))

(add-type-fn! vector-pair-id 'map
  (lambda (f vp)
    (make-vector-pair (map f (vector-pair-x vp)) (map f (vector-pair-y vp)))))

(add-type-fn! vector-pair-id 'reverse
  (lambda (f vp)
    (make-vector-pair (reverse (vector-pair-y vp)) (reverse (vector-pair-x vp)))))

(add-type-fn! vector-pair-id '->string
  (lambda (vp)
    (let ((f (lambda (s0 s1) (string s0 " " s1)))
          (v0-s (foldl f "" (vector-pair-x vp)))
          (v1-s (foldl f "" (vector-pair-y vp))))
      (string "[" v0-s v1-s "]"))))

(add-type-fn! vector-pair-id 'find-first
  (lambda (p vp)
    (let* (res0 (find-first p (vector-pair-x vp)))
      (if (null? res0)
        (find-first p (vector-pair-y vp))
        res0))))

(add-type-fn! vector-pair-id 'eq?
  (lambda (v0 v1)
    (if (vector-pair? v1)
      (&& (eq? (vector-pair-x v0) (vector-pair-x v1))
          (eq? (vector-pair-y v0) (vector-pair-y v1)))
      (eq? (->vector v0) v1))))

(let* (vp-get (lambda (vp i)
        (let* (vpxsize (vector-size (vector-pair-x vp)))
          (cond
            ((> vpxsize i) (vector-get (vector-pair-x vp) i))
            ((> (vector-size (vector-pair-y vp)) (- i vpxsize))
              (vector-get (vector-pair-y vp) (- i vpxsize)))
            (#t '())))))
  (add-type-fns! vector-pair-id
    (list
      (list 'vector-get vp-get)
      (list 'nth vp-get)))
  )

(add-type-fn! vector-pair-id 'filter
  (lambda (p vp)
    (make-vector-pair (filter p (vector-pair-x vp)) (filter p (vector-pair-y vp)))))

(add-type-fn! vector-pair-id 'take
  (lambda (n vp)
    (cond ((<= n (vector-size (vector-pair-x vp))) (take n (vector-pair-x vp)))
          (#t (make-vector-pair (vector-pair-x vp) (take (- n (vector-size (vector-pair-x vp))) (vector-pair-y vp)))))))

(add-type-fn! vector-pair-id 'drop
  (lambda (n vp)
    (cond ((= n 0) vp)
          ((<= n (vector-size vp)) [])
          ((< n (vector-size (vector-pair-x vp)))
           (make-vector-pair (drop (- n (vector-size (vector-pair-x vp))) (vector-pair-y vp))
                              (vector-pair-y vp)))
          (#t (drop (- n (vector-size (vector-pair-x vp))) (vector-pair-y vp))))))

(let* (setter (lambda (vp i e)
    (if (< i (vector-pair-x vp))
      (make-vector-pair (vector-set (vector-pair-x vp) i e) (vector-pair-y vp))
      (make-vector-pair
        (vector-pair-x vp)
        (vector-set (vector-pair-y vp) (- i (vector-size (vector-pair-x vp))) e)))))
  (add-type-fns! vector-pair-id
    (list
    (list 'vector-set setter)
    (list 'set-at setter))))

(add-type-fn! vector-pair-id 'vector-iterate
  (lambda (vp e fn)
    (vector-iterate (->vector (vector-pair-y vp))
      (vector-iterate (->vector (vector-pair-x vp)) e fn)
        fn)))

(add-type-fns! vector-pair-id
  (list
    (list 'empty? (lambda (vp) (&& (empty? (vector-pair-x vp)) (empty? (vector-pair-y vp)))))
    (list 'copy ->vector)
    (list 'list? always-false)
    (list 'vector? always-true)
    (list '->list (lambda (vp) (append (->list (vector-pair-x vp))
                                      (->list (vector-pair-y vp)))))
    
    ; TODO All need proper implementation (Especially vector-get and nth !!!)
    (list 'map-while (lambda (f p vp) (map-while f p (->vector vp)))) ; TODO
    (list 'map-until (lambda (f p vp) (map-until f p (->vector vp)))) ; TODO
    (list 'take-while (lambda (p vp) (take-while p (->vector vp)))) ; TODO
    (list 'take-until (lambda (p vp) (take-until p (->vector vp)))) ; TODO
    (list 'drop-while (lambda (p vp) (drop-while p (->vector vp)))) ; TODO
    (list 'drop-until (lambda (p vp) (drop-until p (->vector vp)))) ; TODO
    (list 'zip (lambda (vp v1) (zip (->vector vp) v1))) ; TODO
    ))
    
    
; --------------------------------------------------
    
    

(add-type-fn! vector-id 'vector-get _vector-get)
(add-type-fn! vector-id 'vectord-iterate _vector-iterate)
(add-type-fn! vector-id 'vector-append _vector-append)

(comment define (vector->string v)
  (vector-iterate v ""
    (lambda (acc e i)
      (string acc (->string e) (if (< i (- (vector-size v) 1)) " " "")))))

(define (_vector-set v idx element)
  (vector-iterate v []
    (lambda (acc e i)
      (if (= i idx) (vector-append acc element) (vector-append acc e)))))

(add-type-fn! vector-id 'vector-set _vector-set)
(add-type-fn! vector-id 'set-at _vector-set)

(add-type-fn! vector-id 'eq?
  (lambda (v0 v1)
    (if (vector? v1)
      (if (= (vector-size v0) (vector-size v1))
        (vector-iterate v0 #t
          (lambda (acc e i)
            (if (&& acc (eq? e (nth v1 i))) #t #f)))
        #f)
      #f)))

(add-type-fn! vector-id 'foldl
  (lambda (f x v)
    (vector-iterate v x
      (lambda (acc e i)
        (f acc e)))))

(add-type-fn! vector-id 'map
  (lambda (f v) 
    (vector-iterate v []
      (lambda (acc e i) (_vector-append acc (f e))))))

(add-type-fn! vector-id 'filter
  (lambda (p v) 
    (vector-iterate v []
      (lambda (acc e i)
        (if (p e) (_vector-append acc e) acc)))))

(comment add-type-fn! vector-id 'append
  (lambda (v v1) 
    (vector-iterate (->vector v1) v
      (lambda (acc e i) (_vector-append acc e)))))

(add-type-fn! vector-id 'append
  (lambda (v v1)
    (cond ((empty? v) v1)
          ((empty? v1) v)
          (#t (make-vector-pair v (->vector v1))))))

(add-type-fn! vector-id 'find-first
  (lambda (p v) 
    (car (cdr
      (vector-iterate v (list #f '())
        (lambda (acc e i)
          (cond ((car acc) acc)
                ((p e) (list #t e))
                (#t acc))))))))

(add-type-fn! vector-id '->list
  (lambda (v)
    (let* (iter (lambda (i nl)
            (if (< i 0)
              nl
              (iter (dec i)
                (cons (vector-get v i) nl)))))
      (iter (dec (vector-size v)) '()))))

(add-type-fn! vector-id 'but-last
  (lambda (v)
    (let* (last-idx (- (_vector-size v) 1))
      (vector-iterate v []
        (lambda (acc e i) (if (<= last-idx i) acc (_vector-append acc e)))))))

(add-type-fn! vector-id 'reverse
  (lambda (v) 
    (let* (vlen (- (_vector-size v) 1))
      (vector-iterate v []
        (lambda (acc e i)
          (vector-append acc (_vector-get v (- vlen i))))))))

(add-type-fn! vector-id 'take
  (lambda (n v)
    (if (>= n (vector-size v))
      v
      (vector-iterate v []
        (lambda (acc e i)
          (if (= n 0)
            acc
            (_vector-append acc e)))))))

(add-type-fn! vector-id 'drop
  (lambda (n v)
    (cond
      ((= n 0) v)
      ((>= n (vector-size v)) [])
      (#t (vector-iterate v []
            (lambda (acc e i)
              (if (> n i)
                acc
                (_vector-append acc e))))))))

(add-type-fn! vector-id 'map-while
  (lambda (f p v)
    (car
    (vector-iterate v (list [] #f)
      (lambda (acc e i)
        (if (car (cdr acc))
          acc
          (if (p e)
            (list (_vector-append (car acc) (f e)) #f)
            (list (car acc) #t))))))))

(add-type-fn! vector-id 'map-until
  (lambda (f p v)
    (map-while f (lambda (e) (not (p e))) v)))

(add-type-fn! vector-id 'take-while
  (lambda (p v)
    (car
    (vector-iterate v (list [] #f)
      (lambda (acc e i)
        (if (car (cdr acc))
          acc
          (if (p e)
            (list (_vector-append (car acc) e) #f)
            (list (car acc) #t))))))))

(add-type-fn! vector-id 'take-until
  (lambda (p v)
    (take-while (lambda (e) (not (p e))) v)))

(add-type-fn! vector-id 'drop-while
  (lambda (p v)
    (car
    (vector-iterate v (list [] #t)
      (lambda (acc e i)
        (if (and (car (cdr acc)) (p e))
          acc
          (list (_vector-append (car acc) e) #f)
          ))))))

(add-type-fn! vector-id 'drop-until
  (lambda (p v)
    (drop-while (lambda (e) (not (p e))) v)))

(add-type-fn! vector-id 'zip
  (lambda (v0 v1)
    (let* (v1size (vector-size (->vector v1)))
      (vector-iterate v0 []
        (lambda (acc e i)
          (if (< i v1size)
            (vector-append acc [e (nth v1 i)])
            acc
            ))))))

(add-type-fns! vector-id
  (list
    (list 'first (lambda (v) (vector-get v 0)))
    (list 'second (lambda (v) (vector-get v 1)))
    (list 'third (lambda (v) (vector-get v 2)))
    (list 'rest (lambda (v) (drop 1 v)))
    (list 'vector-size (lambda (v) (_vector-size v)))
    (list 'empty? (lambda (v) (= (vector-size v) 0)))
    (list 'nth (lambda (v idx) (vector-get v idx)))
    (list '->vector id)
    (list 'copy id)
    (list 'list? always-false)
    (list 'vector? always-true)))

'lyra-core-vector-loaded
)
